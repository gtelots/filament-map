{"version":3,"sources":["../src/components/GeoJSON.tsx","../src/components/FeatureManager.tsx","../src/hooks/useMapStore.tsx","../src/utils/setFeaturesByState.ts","../src/utils/zoomToFeatureByState.ts","../src/utils/setDefaultIcon.ts","../src/utils/toLatLng.ts","../src/utils/toBounds.ts","../src/components/ControlManager.tsx","../src/controls/FullscreenControl.tsx"],"names":["createElementObject","createPathComponent","extendContext","LeafletGeoJSON","GeoJSON","data","options","ctx","geoJSON","layer","props","prevProps","geometryCollection","multiLineString","multiPoint","multiPolygon","getCoord","getCoords","getGeom","getType","featureEach","_map","get","last","useEffect","useMap","createEntityAdapter","nanoid","createContext","useContext","useRef","createStore","useStore","immer","jsx","featuresAdapter","featuresSelectors","state","initialState","actions","set","feature","payload","id","features","MapStoreContext","MapStoreProvider","children","value","storeRef","useMapStore","selector","store","useUpdateEffect","lineString","point","polygon","flattenEach","setFeaturesByState","setFeatures","type","coord","newFeatures","currentFeature","setFeaturesByState_default","circle","pointOnFeature","isGeoJSONObject","isPoint","L","MarkerIcon","MarkerIcon2x","MarkerShadowIcon","setDefaultIcon","setDefaultIcon_default","center","flip","toLatLng","toLatLng_default","bbox","toBounds","arr","toBounds_default","zoomToFeatureByState","zoomToFeature","map","geometry","bounds","zoomToFeatureByState_default","FeatureManager","$wire","geomType","latitudeField","longitudeField","drawField","updateFeature","removeFeature","coords","f","k","target","index","e","FeatureManager_default","AttributionControl","LayersControl","ScaleControl","TileLayer","ZoomControl","GeomanControls","createControlComponent","Control","FullscreenControl","Fragment","controlComponents","defaultDrawControlOptions","ControlManager","baseLayers","_controls","addFeature","removeFeatures","handleCreate","handleRemove","opts","name","Component","selected","title","layerProps","v","control","ControlManager_default"],"mappings":"AAAA,OAEE,uBAAAA,EACA,uBAAAC,EACA,iBAAAC,MACK,sBAEP,OAA8B,WAAWC,MAAsB,UAWxD,IAAMC,EAAUH,EACrB,SAAuB,CAAE,KAAAI,EAAM,GAAGC,CAAQ,EAAGC,EAAK,CAChD,IAAMC,EAAU,IAAIL,EAAeE,EAAMC,CAAO,EAChD,OAAON,EACLQ,EACAN,EAAcK,EAAK,CAAE,iBAAkBC,CAAQ,CAAC,CAClD,CACF,EACA,SAAuBC,EAAOC,EAAOC,EAAW,CAC1CD,EAAM,OAASC,EAAU,MAC3BF,EAAM,YAAY,EAAE,QAAQC,EAAM,IAAI,EAGpCA,EAAM,QAAUC,EAAU,QACxBD,EAAM,OAAS,KACjBD,EAAM,WAAW,EAEjBA,EAAM,SAASC,EAAM,KAAK,EAGhC,CACF,ECvCA,OACE,sBAAAE,GACA,mBAAAC,GACA,cAAAC,GACA,gBAAAC,OACK,gBACP,OAAS,YAAAC,EAAU,aAAAC,EAAW,WAAAC,EAAS,WAAAC,OAAe,kBACtD,OAAS,eAAAC,OAAmB,aAC5B,OAAS,OAAOC,EAAM,OAAAC,GAAK,QAAAC,OAAY,SACvC,OAAS,aAAAC,OAAiB,QAC1B,OAAS,UAAAC,OAAc,gBCVvB,OAAS,uBAAAC,EAAqB,UAAAC,MAAc,mBAC5C,OAAS,iBAAAC,EAAe,cAAAC,EAAY,UAAAC,MAAc,QAClD,OAAS,eAAAC,EAAa,YAAAC,MAAgB,UACtC,OAAS,SAAAC,MAAa,2BA8DlB,cAAAC,MAAA,oBAjDJ,IAAMC,EAAkBT,EAAoB,EAE/BU,EAAoBD,EAAgB,aAAmBE,GAAUA,CAAK,EAE7EC,EAAyBH,EAAgB,gBAAgB,CAC3D,MAAO,KACP,OAAQ,KACR,MAAO,KACP,OAAQ,CAAC,CACb,CAAC,EAEKI,EAAU,CAACC,EAAUlB,KAAc,CACvC,WAAamB,GAAYD,EAAIH,GAAS,CACpCF,EAAgB,OAAOE,EAAO,CAAC,GAAIV,EAAO,EAAG,GAAGc,CAAO,CAAC,CAC1D,CAAC,EAED,cAAgBC,GAAYF,EAAIH,GAAS,CACvCF,EAAgB,UAAUE,EAAOK,CAAO,CAC1C,CAAC,EAED,cAAgBC,GAAeH,EAAIH,GAAS,CAC1CF,EAAgB,UAAUE,EAAOM,CAAE,CACrC,CAAC,EAED,YAAcC,GAAaJ,EAAIH,GAAS,CACtCF,EAAgB,OAAOE,EAAOO,CAAQ,CACxC,CAAC,EAED,eAAgB,IAAMJ,EAAIH,GAAS,CACjCF,EAAgB,UAAUE,CAAK,CACjC,CAAC,CACH,GAEMQ,EAAkBjB,EAAc,IAAI,EAE7BkB,EAAmB,CAAC,CAAE,SAAAC,EAAU,MAAAC,CAAM,IAAM,CACvD,IAAMC,EAAWnB,EAAY,EAC7B,OAAKmB,EAAS,UACZA,EAAS,QAAUlB,EAAmC,EAAEE,EAAM,CAACO,EAAKlB,KAAS,CAC3E,GAAGgB,EACH,GAAGU,EACH,GAAGT,EAAQC,EAAKlB,CAAG,EACnB,MAAO,KAAO,CACZ,GAAGgB,EACH,GAAGU,CACL,EACF,EAAE,CAAC,GAGHd,EAACW,EAAgB,SAAhB,CAAyB,MAAOI,EAAS,QACvC,SAAAF,EACH,CAEJ,EAEaG,EAAeC,GAAa,CACvC,IAAMC,EAAQvB,EAAWgB,CAAe,EACxC,GAAI,CAACO,EACH,MAAM,IAAI,MAAM,0BAA0B,EAE5C,OAAOpB,EAASoB,EAAOD,CAAQ,CACjC,EDjEA,OAAS,mBAAAE,OAAuB,YEZhC,OAAS,UAAA1B,MAAc,mBACvB,OAAS,WAAAc,EAAS,cAAAa,EAAY,SAAAC,GAAO,WAAAC,OAAe,gBACpD,OAAS,aAAAvC,EAAW,WAAAE,OAAe,kBACnC,OAAS,eAAAsC,OAAmB,aAE5B,SAASC,GAAmB,CAAE,MAAArB,EAAO,YAAAsB,CAAY,EAAG,CAClD,IAAMC,EAAOzC,GAAQkB,CAAK,EAE1B,GAAIuB,IAAS,aACXD,EACE1C,EAAUoB,CAAK,EAAE,IAAKwB,IAAW,CAC/B,GAAIlC,EAAO,EACX,GAAG4B,GAAMM,CAAK,CAChB,EAAE,CACJ,UACSD,IAAS,kBAClBD,EACE1C,EAAUoB,CAAK,EAAE,IAAKwB,IAAW,CAC/B,GAAIlC,EAAO,EACX,GAAG2B,EAAWO,CAAK,CACrB,EAAE,CACJ,UACSD,IAAS,eAClBD,EACE1C,EAAUoB,CAAK,EAAE,IAAKwB,IAAW,CAC/B,GAAIlC,EAAO,EACX,GAAG6B,GAAQK,CAAK,CAClB,EAAE,CACJ,UACS,CAAC,QAAS,aAAc,SAAS,EAAE,SAASD,CAAI,EACzDD,EAAY,CACV,CACE,GAAIhC,EAAO,EACX,GAAGc,EAAQJ,CAAK,CAClB,CACF,CAAC,UACOuB,IAAS,qBAAqB,CACtC,IAAIE,EAAc,CAAC,EACnBL,GAAYpB,EAAQ0B,GAAmBD,EAAY,KAAK,CAAC,GAAInC,EAAO,EAAG,GAAGoC,CAAc,CAAC,CAAC,EAC1FJ,EAAYG,CAAW,CACzB,CACF,CAEA,IAAOE,EAAQN,GC1Cf,OAAS,UAAAO,OAAc,eACvB,OAAS,WAAA/C,OAAe,kBACxB,OAAS,kBAAAgD,OAAsB,yBAC/B,OAAS,mBAAAC,GAAiB,WAAAC,OAAe,qBCHzC,OAAOC,OAAO,UACd,OAAOC,OAAgB,sCACvB,OAAOC,OAAkB,yCACzB,OAAOC,OAAsB,wCAE7B,SAASC,GAAenE,EAAU,CAAC,EAAG,CACpC+D,GAAE,KAAK,QAAQ,aAAa,CAC1B,QAASC,GACT,cAAeC,GACf,UAAWC,GACX,GAAGlE,CACL,CAAC,CACH,CAEA,IAAOoE,GAAQD,GCff,OAAS,YAAAzD,OAAgB,kBACzB,OAAO2D,OAAY,eACnB,OAAOC,OAAU,aAEjB,SAASC,GAASxE,EAAW,CAC3B,OAAKA,GAEEW,GAAS4D,GAAKD,GAAOtE,CAAI,CAAC,CAAC,CACpC,CAEA,IAAOyE,EAAQD,GCVf,OAAS,QAAAE,OAAY,aAErB,SAASC,GAAS3E,EAAU,CAC1B,IAAM4E,EAAMF,GAAK1E,CAAI,EAErB,MAAO,CACL,CAAC4E,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EACf,CAACA,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACjB,CACF,CAEA,IAAOC,EAAQF,GHJf,SAASG,GAAqB,CAC5B,MAAA9C,EACA,OAAQ,CAAE,cAAA+C,CAAc,EACxB,IAAAC,CACF,EAAE,CACA,IAAMC,EAAWpE,GAAQmB,CAAY,EAErC,GAAI+B,GAAQkB,CAAQ,EAAG,CACrB,GAAIF,EAAe,CACjB,IAAMG,EAASL,EAASjB,GAAO5B,EAAO,IAAM,CAAE,MAAO,CAAE,CAAC,CAAC,EACzDgD,EAAI,UAAUE,EAAQ,CAAE,QAAS,EAAM,CAAC,CAC1C,MACEF,EAAI,MAAMP,EAASzC,CAAK,EAAG,CAAE,QAAS,EAAM,CAAC,EAG/C,MACF,CAEA,GAAI8B,GAAgBmB,CAAQ,EAC1B,GAAIF,EAAe,CACjB,IAAMG,EAASL,EAAS7C,CAAK,EAC7BgD,EAAI,UAAUE,EAAQ,CAAE,QAAS,EAAM,CAAC,CAC1C,MACEF,EAAI,MAAMP,EAASZ,GAAe7B,CAAK,CAAC,CAAC,CAG/C,CAEA,IAAOmD,EAAQL,GHiEX,cAAAjD,OAAA,oBAnFJ,SAASuD,IAAiB,CACxB,IAAMJ,EAAM5D,GAAO,EACb,CACJY,EACAqD,EACAC,EACAC,EACAC,EACAC,EACAV,EACAxC,EACAmD,EACApC,EACAqC,CACF,EAAI9C,EAAab,GAAe,CAC9BA,EAAM,MACNA,EAAM,MACNA,EAAM,OAAO,SACbA,EAAM,OAAO,cACbA,EAAM,OAAO,eACbA,EAAM,OAAO,UACbA,EAAM,OAAO,cACbD,EAAkB,UAAUC,CAAK,EACjCA,EAAM,cACNA,EAAM,YACNA,EAAM,aACR,CAAC,EAED,OAAAb,GAAU,IAAM,CACTa,IAEL2B,EAAmB,CACjB,MAAA3B,EACA,YAAAsB,CACF,CAAC,EAED6B,EAAqB,CACnB,MAAAnD,EACA,OAAQ,CAAE,cAAA+C,CAAc,EACxB,IAAAC,CACF,CAAC,EACH,EAAG,CAAC,CAAC,EAELhC,GAAgB,IAAM,CACpB,GAAIT,GAAU,QACZ,GACE,CAAC,QAAS,aAAc,SAAS,EAAE,SAAS+C,CAAQ,GACpD/C,GAAU,SAAW,EACrB,CACA,IAAM0C,EAAWpE,EAAQK,GAAKqB,CAAQ,CAAQ,EAE9C,GAAI+C,IAAa,QAAS,CACxB,IAAMM,EAASjF,EAASsE,CAAQ,EAChCM,GAAiBF,EAAM,IAAIE,EAAeK,EAAO,CAAC,EAAG,EAAK,EAC1DJ,GAAkBH,EAAM,IAAIG,EAAgBI,EAAO,CAAC,EAAG,EAAK,CAC9D,CAEAH,GAAaJ,EAAM,IAAII,EAAW,KAAK,UAAUR,CAAQ,EAAG,EAAK,CACnE,SAAWK,IAAa,aAAc,CACpC,IAAML,EAAWpE,EAAQJ,GAAWO,EAAKuB,EAAW,GAAM5B,EAAS,CAAC,CAAC,CAAC,CAAC,EACvE8E,GAAaJ,EAAM,IAAII,EAAW,KAAK,UAAUR,CAAQ,EAAG,EAAK,CACnE,SAAWK,IAAa,kBAAmB,CACzC,IAAML,EAAWpE,EACfL,GAAgBQ,EAAKuB,EAAW,GAAM3B,EAAU,CAAC,CAAC,CAAC,CACrD,EACA6E,GAAaJ,EAAM,IAAII,EAAW,KAAK,UAAUR,CAAQ,EAAG,EAAK,CACnE,SAAWK,IAAa,eAAgB,CACtC,IAAML,EAAWpE,EACfH,GAAaM,EAAKuB,EAAW,GAAM3B,EAAU,CAAC,CAAC,CAAC,CAClD,EACA6E,GAAaJ,EAAM,IAAII,EAAW,KAAK,UAAUR,CAAQ,EAAG,EAAK,CACnE,SAAWK,IAAa,qBAAsB,CAC5C,IAAML,EAAWpE,EACfN,GAAmBS,EAAKuB,EAAW,GAAM1B,EAAQ,CAAC,CAAC,CAAC,CACtD,EACA4E,GAAaJ,EAAM,IAAII,EAAW,KAAK,UAAUR,CAAQ,EAAG,EAAK,CACnE,OAEAQ,GAAaJ,EAAM,IAAII,EAAW,GAAI,EAAK,CAE/C,EAAG,CAAC,KAAK,UAAUlD,CAAQ,CAAC,CAAC,EAEtBA,GAAU,IAAI,CAACsD,EAAGC,IACvBjE,GAAC9B,EAAA,CAEC,KAAM8F,EACN,cACE,CACE,YAAa,CAAC,CAAE,MAAAzF,EAAO,OAAA2F,CAAO,IAAM,CAClChF,GAAYgF,EAAO,UAAU,EAAG,CAAC3D,EAAS4D,IAAU,CAClDN,EAAc,CACZ,GAAItD,EAAQ,GACZ,QAASA,CACX,CAAC,CACH,CAAC,CACH,EAEA,SAAW6D,GAAM,CACfjB,EAAI,YAAYiB,EAAE,KAAK,EAEvB,IAAM3D,EAAKrB,GAAIgF,EAAG,0BAA0B,EAC5CN,EAAcrD,CAAE,EAEhB,IAAMiB,EAAOzC,GAAQmF,EAAE,MAAM,UAAU,CAAC,EAClChB,EAAWpE,EACf0C,IAAS+B,EACLW,EAAE,MAAM,UAAU,EAClBA,EAAE,cAAc,UAAU,CAChC,EAEAtC,EAAmB,CACjB,MAAOsB,EACP,YAAA3B,CACF,CAAC,CACH,CACF,GA/BGwC,CAiCP,CACD,CACH,CAEA,IAAOI,GAAQd,GO1If,OACE,sBAAAe,GACA,iBAAAC,EACA,gBAAAC,GACA,aAAAC,GACA,eAAAC,OACK,gBACP,OAAS,kBAAAC,OAAsB,0BCP/B,OAAS,0BAAAC,OAA8B,sBACvC,OAAS,WAAAC,OAAgC,UACzC,MAAO,qBACP,MAAO,4CAYA,IAAMC,EAAoBF,GAI/B,SAAiCpG,EAAO,CAExC,OAAO,IAAIqG,GAAQ,WAAWrG,CAAK,CACrC,CAAC,EDZD,OAAS,OAAOW,OAAY,SAC5B,OAAS,YAAA4F,OAAgB,QAsET,cAAA/E,MAAA,oBApEhB,IAAMgF,GAAoB,CACxB,YAAaN,GACb,cAAeH,EACf,YAAaI,GACb,mBAAoBL,GACpB,aAAcE,GACd,kBAAmBM,CACrB,EAEMG,GAA4B,CAChC,WAAY,GACZ,WAAY,GACZ,iBAAkB,GAClB,aAAc,GACd,cAAe,GACf,YAAa,GACb,SAAU,GAEV,SAAU,GACV,SAAU,GACV,WAAY,GACZ,YAAa,GACb,WAAY,EACd,EAEA,SAASC,IAAiB,CACxB,GAAM,CAACzB,EAAU0B,EAAYC,CAAS,EAAIpE,EAAab,GAAU,CAC/DA,EAAM,OAAO,SACbA,EAAM,OAAO,WACbA,EAAM,OAAO,QACf,CAAC,EAEK,CAACkF,EAAYvB,EAAewB,CAAc,EAAItE,EACjDb,GAAU,CACTA,EAAM,WACNA,EAAM,cACNA,EAAM,cACR,CACF,EAEMoF,EAAgBnB,GAAM,CAC1BA,EAAE,OAAO,YAAYA,EAAE,KAAK,EAExB,CAAC,QAAS,aAAc,SAAS,EAAE,SAASX,CAAQ,GAAG6B,EAAe,EAE1ED,EAAWjB,EAAE,MAAM,UAAU,CAAC,CAChC,EAEMoB,EAAe,CAAC,CAAE,MAAAjH,EAAO,OAAA2F,CAAO,IAAM,CAC1C,IAAMzD,EAAKlC,EAAM,QAAQ,GAEzBkC,GAAMqD,EAAcrD,CAAE,CACxB,EAkFA,OAhFiBtB,GAAKiG,EAAW,CAACK,EAAMC,IAAS,CAC/C,IAAMC,EAAYX,GAAkBU,CAAI,EACxC,GAAI,CAACD,GAAQA,GAAM,SAAW,IAAS,CAACE,EAAW,OAAO,KAC1D,QAAQ,IAAID,CAAI,EAEhB,IAAItH,EAAU,CAAE,GAAGqH,CAAK,EACpB5E,EAAgB,KAEpB,OAAI6E,IAAS,kBACX7E,EACEb,EAAC+E,GAAA,CACE,SAAAI,GAAY,IACX,CAAC,CAAE,SAAAS,EAAW,GAAO,MAAAC,EAAQ,OAAQ,GAAGC,CAAW,EAAG7B,IACpDjE,EAACuE,EAAc,UAAd,CAAgC,KAAMsB,EAAO,QAASD,EACrD,SAAA5F,EAACyE,GAAA,CAAU,IAAI,GAAI,GAAGqB,EAAY,GADN7B,CAE9B,CAEJ,EACF,GAIAyB,IAAS,gBACXtH,EAAU,CACR,GAAGA,EACH,QAAS6G,EACX,EAEI,CAAC,QAAS,YAAY,EAAE,SAASxB,CAAQ,EAC3CrF,EAAQ,QAAU,CAChB,GAAGA,EAAQ,QACX,WAAY,GACZ,SAAU,GACV,YAAa,EACf,EACS,CAAC,aAAc,iBAAiB,EAAE,SAASqF,CAAQ,EAC5DrF,EAAQ,QAAU,CAChB,GAAGA,EAAQ,QACX,aAAc,GACd,SAAU,GACV,SAAU,GACV,WAAY,GACZ,YAAa,GACb,WAAY,EACd,EACS,CAAC,UAAW,cAAc,EAAE,SAASqF,CAAQ,EACtDrF,EAAQ,QAAU,CAChB,GAAGA,EAAQ,QACX,cAAe,GACf,YAAa,GACb,SAAU,GACV,SAAU,GACV,WAAY,GACZ,YAAa,GACb,WAAY,EACd,EAEAA,EAAQ,QAAU,CAChB,GAAGA,EAAQ,QACX,WAAY,GACZ,WAAY,GACZ,aAAc,GACd,cAAe,GACf,YAAa,GAEb,SAAU,GACV,SAAU,GACV,WAAY,GACZ,YAAa,GACb,WAAY,EACd,EAGFA,EAAQ,SAAWmH,EACnBnH,EAAQ,YAAcoH,GAGjBxF,EAAC2F,EAAA,CAAsB,GAAGvH,EAAS,SAAUyC,GAA7B6E,CAAuC,CAChE,CAAC,EAAE,OAAQK,GAAMA,CAAC,EAEF,IAAKC,GAAiBA,CAAO,CAC/C,CAEA,IAAOC,GAAQf","sourcesContent":["import {\n  type PathProps,\n  createElementObject,\n  createPathComponent,\n  extendContext,\n} from '@react-leaflet/core'\nimport type { GeoJsonObject } from 'geojson'\nimport { type GeoJSONOptions, GeoJSON as LeafletGeoJSON } from 'leaflet'\n\nimport type { LayerGroupProps } from 'react-leaflet'\n\nexport interface GeoJSONProps\n  extends GeoJSONOptions,\n    LayerGroupProps,\n    PathProps {\n  data: GeoJsonObject\n}\n\nexport const GeoJSON = createPathComponent<LeafletGeoJSON, GeoJSONProps>(\n  function createGeoJSON({ data, ...options }, ctx) {\n    const geoJSON = new LeafletGeoJSON(data, options)\n    return createElementObject(\n      geoJSON,\n      extendContext(ctx, { overlayContainer: geoJSON }),\n    )\n  },\n  function updateGeoJSON(layer, props, prevProps) {\n    if (props.data !== prevProps.data) {\n      layer.clearLayers().addData(props.data);\n    }\n\n    if (props.style !== prevProps.style) {\n      if (props.style == null) {\n        layer.resetStyle()\n      } else {\n        layer.setStyle(props.style)\n      }\n    }\n  },\n)\n","import {\n  geometryCollection,\n  multiLineString,\n  multiPoint,\n  multiPolygon,\n} from '@turf/helpers'\nimport { getCoord, getCoords, getGeom, getType } from '@turf/invariant'\nimport { featureEach } from '@turf/meta'\nimport { map as _map, get, last } from 'lodash'\nimport { useEffect } from 'react'\nimport { useMap } from 'react-leaflet'\nimport { featuresSelectors, useMapStore } from '../hooks/useMapStore'\nimport { useUpdateEffect } from 'react-use'\nimport setFeaturesByState from '../utils/setFeaturesByState'\nimport zoomToFeatureByState from '../utils/zoomToFeatureByState'\nimport { GeoJSON } from '../components/GeoJSON'\n\nfunction FeatureManager() {\n  const map = useMap()\n  const [\n    state,\n    $wire,\n    geomType,\n    latitudeField,\n    longitudeField,\n    drawField,\n    zoomToFeature,\n    features,\n    updateFeature,\n    setFeatures,\n    removeFeature,\n  ] = useMapStore((state: any) => [\n    state.state,\n    state.$wire,\n    state.config.geomType,\n    state.config.latitudeField,\n    state.config.longitudeField,\n    state.config.drawField,\n    state.config.zoomToFeature,\n    featuresSelectors.selectAll(state),\n    state.updateFeature,\n    state.setFeatures,\n    state.removeFeature,\n  ])\n\n  useEffect(() => {\n    if (!state) return\n\n    setFeaturesByState({\n      state,\n      setFeatures,\n    })\n\n    zoomToFeatureByState({\n      state,\n      config: { zoomToFeature },\n      map,\n    })\n  }, [])\n\n  useUpdateEffect(() => {\n    if (features?.length) {\n      if (\n        ['Point', 'LineString', 'Polygon'].includes(geomType) &&\n        features?.length === 1\n      ) {\n        const geometry = getGeom(last(features) as any)\n\n        if (geomType === 'Point') {\n          const coords = getCoord(geometry)\n          latitudeField && $wire.set(latitudeField, coords[1], false)\n          longitudeField && $wire.set(longitudeField, coords[0], false)\n        }\n\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      } else if (geomType === 'MultiPoint') {\n        const geometry = getGeom(multiPoint(_map(features, (i) => getCoord(i))))\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      } else if (geomType === 'MultiLineString') {\n        const geometry = getGeom(\n          multiLineString(_map(features, (i) => getCoords(i))),\n        )\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      } else if (geomType === 'MultiPolygon') {\n        const geometry = getGeom(\n          multiPolygon(_map(features, (i) => getCoords(i))),\n        )\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      } else if (geomType === 'GeometryCollection') {\n        const geometry = getGeom(\n          geometryCollection(_map(features, (i) => getGeom(i))),\n        )\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      }\n    } else {\n      drawField && $wire.set(drawField, '', false)\n    }\n  }, [JSON.stringify(features)])\n\n  return features?.map((f, k) => (\n    <GeoJSON\n      key={k}\n      data={f}\n      eventHandlers={\n        {\n          'pm:update': ({ layer, target }) => {\n            featureEach(target.toGeoJSON(), (feature, index) => {\n              updateFeature({\n                id: feature.id,\n                changes: feature,\n              })\n            })\n          },\n\n          'pm:cut': (e) => {\n            map.removeLayer(e.layer)\n\n            const id = get(e, 'originalLayer.feature.id')\n            removeFeature(id)\n\n            const type = getType(e.layer.toGeoJSON())\n            const geometry = getGeom(\n              type === geomType\n                ? e.layer.toGeoJSON()\n                : e.originalLayer.toGeoJSON(),\n            )\n\n            setFeaturesByState({\n              state: geometry,\n              setFeatures,\n            })\n          },\n        } as any\n      }\n    />\n  ))\n}\n\nexport default FeatureManager\n","import { createEntityAdapter, nanoid } from '@reduxjs/toolkit'\nimport { createContext, useContext, useRef } from 'react'\nimport { createStore, useStore } from 'zustand'\nimport { immer } from 'zustand/middleware/immer'\n\ntype MapState = {\n  $wire: any\n  $watch: any\n  state: any\n  config: Record<string, any>\n}\n\ntype MapActions = {\n  setFeatures: (features) => void\n}\n\nconst featuresAdapter = createEntityAdapter()\n\nexport const featuresSelectors = featuresAdapter.getSelectors<any>((state) => state)\n\nconst initialState: MapState = featuresAdapter.getInitialState({\n    $wire: null,\n    $watch: null,\n    state: null,\n    config: {} as any,\n}) satisfies MapState as MapState\n\nconst actions = (set: any, get: any) => ({\n  addFeature: (feature) => set(state => {\n    featuresAdapter.addOne(state, {id: nanoid(), ...feature})\n  }),\n\n  updateFeature: (payload) => set(state => {\n    featuresAdapter.updateOne(state, payload)\n  }),\n\n  removeFeature: (id: string) => set(state => {\n    featuresAdapter.removeOne(state, id)\n  }),\n\n  setFeatures: (features) => set(state => {\n    featuresAdapter.setAll(state, features)\n  }),\n\n  removeFeatures: () => set(state => {\n    featuresAdapter.removeAll(state)\n  })\n}) as MapActions\n\nconst MapStoreContext = createContext(null)\n\nexport const MapStoreProvider = ({ children, value }) => {\n  const storeRef = useRef<any>()\n  if (!storeRef.current) {\n    storeRef.current = createStore<MapState & MapActions>()(immer((set, get) => ({\n      ...initialState,\n      ...value,\n      ...actions(set, get),\n      reset: () => ({\n        ...initialState,\n        ...value,\n      })\n    })))\n  }\n  return (\n    <MapStoreContext.Provider value={storeRef.current}>\n      {children}\n    </MapStoreContext.Provider>\n  )\n}\n\nexport const useMapStore = (selector) => {\n  const store = useContext(MapStoreContext)\n  if (!store) {\n    throw new Error('Missing MapStoreProvider')\n  }\n  return useStore(store, selector) as any\n}\n\nexport default useMapStore\n","import { nanoid } from '@reduxjs/toolkit'\nimport { feature, lineString, point, polygon } from '@turf/helpers'\nimport { getCoords, getType } from '@turf/invariant'\nimport { flattenEach } from '@turf/meta'\n\nfunction setFeaturesByState({ state, setFeatures }) {\n  const type = getType(state)\n\n  if (type === 'MultiPoint') {\n    setFeatures(\n      getCoords(state).map((coord) => ({\n        id: nanoid(),\n        ...point(coord),\n      })),\n    )\n  } else if (type === 'MultiLineString') {\n    setFeatures(\n      getCoords(state).map((coord) => ({\n        id: nanoid(),\n        ...lineString(coord),\n      })),\n    )\n  } else if (type === 'MultiPolygon') {\n    setFeatures(\n      getCoords(state).map((coord) => ({\n        id: nanoid(),\n        ...polygon(coord),\n      })),\n    )\n  } else if (['Point', 'LineString', 'Polygon'].includes(type)) {\n    setFeatures([\n      {\n        id: nanoid(),\n        ...feature(state),\n      },\n    ])\n  } else if(type === 'GeometryCollection'){\n    let newFeatures = [] as any\n    flattenEach(state, (currentFeature) => newFeatures.push({id: nanoid(), ...currentFeature}))\n    setFeatures(newFeatures)\n  }\n}\n\nexport default setFeaturesByState\n","\nimport { circle } from '@turf/circle'\nimport { getGeom } from '@turf/invariant'\nimport { pointOnFeature } from '@turf/point-on-feature'\nimport { isGeoJSONObject, isPoint } from 'geojson-validation'\nimport { toBounds, toLatLng } from '../utils'\n\nfunction zoomToFeatureByState({\n  state,\n  config: { zoomToFeature },\n  map\n}){\n  const geometry = getGeom(state as any)\n\n  if (isPoint(geometry)) {\n    if (zoomToFeature) {\n      const bounds = toBounds(circle(state, 0.25, { steps: 4 })) as any\n      map.fitBounds(bounds, { animate: false })\n    } else {\n      map.panTo(toLatLng(state), { animate: false })\n    }\n\n    return\n  }\n\n  if (isGeoJSONObject(geometry)) {\n    if (zoomToFeature) {\n      const bounds = toBounds(state) as any\n      map.fitBounds(bounds, { animate: false })\n    } else {\n      map.panTo(toLatLng(pointOnFeature(state)))\n    }\n  }\n}\n\nexport default zoomToFeatureByState\n","// @ts-nocheck\nimport L from 'leaflet'\nimport MarkerIcon from 'leaflet/dist/images/marker-icon.png'\nimport MarkerIcon2x from 'leaflet/dist/images/marker-icon-2x.png'\nimport MarkerShadowIcon from 'leaflet/dist/images/marker-shadow.png'\n\nfunction setDefaultIcon(options = {}) {\n  L.Icon.Default.mergeOptions({\n    iconUrl: MarkerIcon as any,\n    iconRetinaUrl: MarkerIcon2x as string,\n    shadowUrl: MarkerShadowIcon as string,\n    ...options\n  })\n}\n\nexport default setDefaultIcon\n","import { getCoord } from '@turf/invariant'\nimport center from '@turf/center';\nimport flip from '@turf/flip';\n\nfunction toLatLng(data: any) {\n  if (!data) return data\n\n  return getCoord(flip(center(data)))\n}\n\nexport default toLatLng\n","import { bbox } from '@turf/bbox'\n\nfunction toBounds(data: any){\n  const arr = bbox(data)\n\n  return [\n    [arr[1], arr[0]],\n    [arr[3], arr[2]]\n  ]\n}\n\nexport default toBounds\n","import {\n  AttributionControl,\n  LayersControl,\n  ScaleControl,\n  TileLayer,\n  ZoomControl,\n} from 'react-leaflet'\nimport { GeomanControls } from 'react-leaflet-geoman-v2'\nimport { FullscreenControl } from '../controls/FullscreenControl'\nimport { useMapStore } from '../hooks/useMapStore'\nimport { map as _map } from 'lodash'\nimport { Fragment } from 'react'\n\nconst controlComponents = {\n  zoomControl: ZoomControl,\n  layersControl: LayersControl,\n  drawControl: GeomanControls,\n  attributionControl: AttributionControl,\n  scaleControl: ScaleControl,\n  fullscreenControl: FullscreenControl,\n}\n\nconst defaultDrawControlOptions = {\n  drawMarker: true,\n  drawCircle: false,\n  drawCircleMarker: false,\n  drawPolyline: false,\n  drawRectangle: false,\n  drawPolygon: false,\n  drawText: false,\n\n  editMode: true,\n  dragMode: false,\n  cutPolygon: false,\n  removalMode: true,\n  rotateMode: false,\n}\n\nfunction ControlManager() {\n  const [geomType, baseLayers, _controls] = useMapStore((state) => [\n    state.config.geomType,\n    state.config.baseLayers,\n    state.config.controls,\n  ])\n\n  const [addFeature, removeFeature, removeFeatures] = useMapStore(\n    (state) => [\n      state.addFeature,\n      state.removeFeature,\n      state.removeFeatures,\n    ],\n  )\n\n  const handleCreate = (e) => {\n    e.target.removeLayer(e.layer)\n\n    if (['Point', 'LineString', 'Polygon'].includes(geomType)) removeFeatures()\n\n    addFeature(e.layer.toGeoJSON())\n  }\n\n  const handleRemove = ({ layer, target }) => {\n    const id = layer.feature.id\n\n    id && removeFeature(id)\n  }\n\n  const controls = _map(_controls, (opts, name) => {\n    const Component = controlComponents[name]\n    if (!opts || opts?.enabled == false || !Component) return null\n    console.log(name);\n\n    let options = { ...opts }\n    let children: any = null\n\n    if (name === 'layersControl') {\n      children = (\n        <Fragment>\n          {baseLayers?.map(\n            ({ selected = false, title = 'None', ...layerProps }, k) => (\n              <LayersControl.BaseLayer key={k} name={title} checked={selected}>\n                <TileLayer url=\"\" {...layerProps} />\n              </LayersControl.BaseLayer>\n            ),\n          )}\n        </Fragment>\n      )\n    }\n\n    if (name === 'drawControl') {\n      options = {\n        ...options,\n        options: defaultDrawControlOptions,\n      }\n\n      if (['Point', 'MultiPoint'].includes(geomType)) {\n        options.options = {\n          ...options.options,\n          drawMarker: true,\n          editMode: true,\n          removalMode: true,\n        }\n      } else if (['LineString', 'MultiLineString'].includes(geomType)) {\n        options.options = {\n          ...options.options,\n          drawPolyline: true,\n          editMode: true,\n          dragMode: true,\n          cutPolygon: true,\n          removalMode: true,\n          rotateMode: true,\n        }\n      } else if (['Polygon', 'MultiPolygon'].includes(geomType)) {\n        options.options = {\n          ...options.options,\n          drawRectangle: true,\n          drawPolygon: true,\n          editMode: true,\n          dragMode: true,\n          cutPolygon: true,\n          removalMode: true,\n          rotateMode: true,\n        }\n      } else {\n        options.options = {\n          ...options.options,\n          drawMarker: true,\n          drawCircle: true,\n          drawPolyline: true,\n          drawRectangle: true,\n          drawPolygon: true,\n\n          editMode: true,\n          dragMode: true,\n          cutPolygon: true,\n          removalMode: true,\n          rotateMode: true,\n        }\n      }\n\n      options.onCreate = handleCreate\n      options.onMapRemove = handleRemove\n    }\n\n    return <Component key={name} {...options} children={children} />\n  }).filter((v) => v)\n\n  return controls.map((control: any) => control)\n}\n\nexport default ControlManager\n","import { createControlComponent } from '@react-leaflet/core'\nimport { Control, ControlPosition } from 'leaflet'\nimport 'leaflet.fullscreen'\nimport 'leaflet.fullscreen/Control.FullScreen.css'\n\nexport type FullscreenOptions = {\n  content?: string | undefined;\n  position?: ControlPosition | undefined;\n  title?: string | undefined;\n  titleCancel?: string | undefined;\n  forceSeparateButton?: boolean | undefined;\n  forcePseudoFullscreen?: boolean | undefined;\n  fullscreenElement?: false | HTMLElement | undefined;\n}\n\nexport const FullscreenControl = createControlComponent<\n  // @ts-ignore\n  Control.FullScreen,\n  FullscreenOptions\n>(function createFullscreenControl(props) {\n  // @ts-ignore\n  return new Control.FullScreen(props)\n})\n"]}