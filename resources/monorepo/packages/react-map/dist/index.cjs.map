{"version":3,"sources":["../src/components/GeoJSON.tsx","../src/components/PopupTemplate.tsx","../src/components/GeoJSONAjax.tsx","../src/components/FeatureManager.tsx","../src/hooks/useMapStore.tsx","../src/utils/setFeaturesByState.ts","../src/utils/zoomToFeatureByState.ts","../src/utils/setDefaultIcon.ts","../src/utils/toLatLng.ts","../src/utils/toBounds.ts","../src/components/ControlManager.tsx","../src/controls/FullscreenControl.tsx","../src/components/DynamicLayer.tsx"],"names":["createElementObject","createPathComponent","extendContext","LeafletGeoJSON","GeoJSON","data","options","ctx","geoJSON","layer","props","prevProps","get","isArray","template","jsx","jsxs","tpl","str","PopupTemplate","heading","content","c","k","PopupTemplate_default","useEffect","useState","isFunction","GeoJSONAjax","dataUrl","children","opts","enabled","setEnabled","setData","resp","event","GeoJSONAjax_default","geometryCollection","multiLineString","multiPoint","multiPolygon","getCoord","getCoords","getGeom","getType","featureEach","_map","last","Pane","useMap","createEntityAdapter","nanoid","createContext","useContext","useRef","createStore","useStore","immer","featuresAdapter","featuresSelectors","state","initialState","actions","set","feature","payload","id","features","MapStoreContext","MapStoreProvider","value","storeRef","useMapStore","selector","store","useUpdateEffect","lineString","point","polygon","flattenEach","setFeaturesByState","setFeatures","type","coord","newFeatures","currentFeature","setFeaturesByState_default","circle","pointOnFeature","isGeoJSONObject","isPoint","L","MarkerIcon","MarkerIcon2x","MarkerShadowIcon","setDefaultIcon","setDefaultIcon_default","center","flip","toLatLng","toLatLng_default","bbox","toBounds","arr","toBounds_default","zoomToFeatureByState","zoomToFeature","map","geometry","bounds","zoomToFeatureByState_default","Fragment","FeatureManager","$wire","geomType","latitudeField","longitudeField","drawField","markerOptions","polylineOptions","polygonOptions","rectangleOptions","updateFeature","removeFeature","coords","i","geojsonOpts","latlng","markerOpts","target","index","e","f","FeatureManager_default","AttributionControl","LayersControl","ScaleControl","TileLayer","ZoomControl","GeomanControls","createControlComponent","Control","FullscreenControl","useMemo","WMSTileLayer","isString","renderToString","DynamicLayer","popupTemplate","other","tplPopupProps","DynamicLayer_default","controlComponents","defaultDrawControlOptions","ControlManager","layers","baseLayers","_controls","addFeature","removeFeatures","handleCreate","handleRemove","name","Component","selected","title","layerProps","v","control","ControlManager_default"],"mappings":"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","sourcesContent":["import {\n  type PathProps,\n  createElementObject,\n  createPathComponent,\n  extendContext,\n} from '@react-leaflet/core'\nimport type { GeoJsonObject } from 'geojson'\nimport { type GeoJSONOptions, GeoJSON as LeafletGeoJSON } from 'leaflet'\n\nimport type { LayerGroupProps } from 'react-leaflet'\n\nexport interface GeoJSONProps\n  extends GeoJSONOptions,\n    LayerGroupProps,\n    PathProps {\n  data: GeoJsonObject\n}\n\nexport const GeoJSON = createPathComponent<LeafletGeoJSON, GeoJSONProps>(\n  function createGeoJSON({ data, ...options }, ctx) {\n    const geoJSON = new LeafletGeoJSON(data, options)\n    return createElementObject(\n      geoJSON,\n      extendContext(ctx, { overlayContainer: geoJSON }),\n    )\n  },\n  function updateGeoJSON(layer, props, prevProps) {\n    if (props.data !== prevProps.data) {\n      layer.clearLayers().addData(props.data);\n    }\n\n    if (props.style !== prevProps.style) {\n      if (props.style == null) {\n        layer.resetStyle()\n      } else {\n        layer.setStyle(props.style)\n      }\n    }\n  },\n)\n","import { get, isArray, isString, template } from 'lodash'\n\ntype TPopupTemplate = {\n  heading?: ''\n  content?: Record<string, any> | string\n  data: Record<string, any>\n  template?: string\n}\n\nconst tpl = (str, data) => str ? template(str, { interpolate: /{{([\\s\\S]+?)}}/g })(data) : ''\n\nfunction PopupTemplate(props: TPopupTemplate) {\n  const { template, heading, content, data } = props\n\n  if (template) return <div dangerouslySetInnerHTML={{__html: tpl(template, data)}} />\n\n  return (\n    <div>\n      <div className=\"pc-heading\">{tpl(heading, data)}</div>\n      <hr />\n      {isArray(content) ? (\n        <div>\n          {content?.map((c, k) => (\n            <div key={k}>\n              <span className='pc-content-label'>{c.label}: </span>\n              {get(data, c.value)}\n            </div>\n          ))}\n        </div>\n      ) : <div dangerouslySetInnerHTML={{__html: tpl(content, data)}} />}\n\n    </div>\n  )\n}\n\nexport default PopupTemplate\n","import { useEffect, useState } from 'react'\nimport { GeoJSON } from './GeoJSON'\nimport { isFunction } from 'lodash'\n\ntype TGeoJSONAjax = {\n  dataUrl: string\n  pmIgnore?: boolean\n  children?: any\n}\n\nfunction GeoJSONAjax(props: TGeoJSONAjax) {\n  const { dataUrl, children, ...opts } = props\n\n  const [enabled, setEnabled] = useState(false)\n  const [data, setData] = useState(null as any)\n\n  useEffect(() => {\n    if (enabled && dataUrl) {\n      fetch(dataUrl)\n        .then((resp) => resp.json())\n        .then((resp) => {\n          setData(resp)\n        })\n    }\n  }, [enabled, dataUrl])\n\n  return (\n    <GeoJSON\n      {...opts}\n      data={data}\n      eventHandlers={{\n        add: (event) => {\n          setEnabled(true)\n        },\n        remove: (event) => {\n          setEnabled(false)\n        },\n      }}\n    >\n      {isFunction(children) && data && children(data)}\n    </GeoJSON>\n  )\n}\n\nexport default GeoJSONAjax\n","import {\n  geometryCollection,\n  multiLineString,\n  multiPoint,\n  multiPolygon,\n} from '@turf/helpers'\nimport { getCoord, getCoords, getGeom, getType } from '@turf/invariant'\nimport { featureEach } from '@turf/meta'\nimport { map as _map, get, last } from 'lodash'\nimport { useEffect } from 'react'\nimport { Pane, useMap } from 'react-leaflet'\nimport { featuresSelectors, useMapStore } from '../hooks/useMapStore'\nimport { useUpdateEffect } from 'react-use'\nimport setFeaturesByState from '../utils/setFeaturesByState'\nimport zoomToFeatureByState from '../utils/zoomToFeatureByState'\nimport { GeoJSON } from '../components/GeoJSON'\nimport L from 'leaflet'\n\nconsole.log(123);\n\nfunction FeatureManager() {\n  const map = useMap()\n  const [\n    state,\n    $wire,\n    geomType,\n    latitudeField,\n    longitudeField,\n    drawField,\n    zoomToFeature,\n    markerOptions,\n    polylineOptions,\n    polygonOptions,\n    rectangleOptions,\n    features,\n    updateFeature,\n    setFeatures,\n    removeFeature,\n  ] = useMapStore((state: any) => [\n    state.state,\n    state.$wire,\n    state.config.geomType,\n    state.config.latitudeField,\n    state.config.longitudeField,\n    state.config.drawField,\n    state.config.zoomToFeature,\n    state.config.markerOptions,\n    state.config.polylineOptions,\n    state.config.polygonOptions,\n    state.config.rectangleOptions,\n    featuresSelectors.selectAll(state),\n    state.updateFeature,\n    state.setFeatures,\n    state.removeFeature,\n  ])\n\n  useEffect(() => {\n    if (!state) return\n\n    setFeaturesByState({\n      state,\n      setFeatures,\n    })\n\n    zoomToFeatureByState({\n      state,\n      config: { zoomToFeature },\n      map,\n    })\n  }, [])\n\n  useUpdateEffect(() => {\n    if (features?.length) {\n      console.log(features);\n\n      if (\n        ['Point', 'LineString', 'Polygon'].includes(geomType) &&\n        features?.length === 1\n      ) {\n        const geometry = getGeom(last(features) as any)\n\n        if (geomType === 'Point') {\n          const coords = getCoord(geometry)\n          latitudeField && $wire.set(latitudeField, coords[1], false)\n          longitudeField && $wire.set(longitudeField, coords[0], false)\n        }\n\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      } else if (geomType === 'MultiPoint') {\n        const geometry = getGeom(multiPoint(_map(features, (i) => getCoord(i))))\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      } else if (geomType === 'MultiLineString') {\n        const geometry = getGeom(\n          multiLineString(_map(features, (i) => getCoords(i))),\n        )\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      } else if (geomType === 'MultiPolygon') {\n        const geometry = getGeom(\n          multiPolygon(_map(features, (i) => getCoords(i))),\n        )\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      } else if (geomType === 'GeometryCollection') {\n        const geometry = getGeom(\n          geometryCollection(_map(features, (i) => getGeom(i))),\n        )\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      }\n    } else {\n      drawField && $wire.set(drawField, '', false)\n    }\n  }, [JSON.stringify(features)])\n\n  let geojsonOpts = {\n    pointToLayer: (point, latlng) => {\n      let markerOpts = { ...markerOptions }\n      if (markerOpts.icon) markerOpts.icon = L.icon(markerOpts.icon)\n      return L.marker(latlng, markerOpts)\n    },\n    style: () => {\n      return {\n        ...polylineOptions,\n        ...polygonOptions,\n        ...rectangleOptions,\n      }\n    },\n    eventHandlers: {\n      'pm:update': ({ layer, target }) => {\n        featureEach(target.toGeoJSON(), (feature, index) => {\n          updateFeature({\n            id: feature.id,\n            changes: feature,\n          })\n        })\n      },\n\n      'pm:cut': (e) => {\n        map.removeLayer(e.layer)\n\n        const id = get(e, 'originalLayer.feature.id')\n        removeFeature(id)\n\n        const type = getType(e.layer.toGeoJSON())\n        const geometry = getGeom(\n          type === geomType\n            ? e.layer.toGeoJSON()\n            : e.originalLayer.toGeoJSON(),\n        )\n\n        setFeaturesByState({\n          state: geometry,\n          setFeatures,\n        })\n      },\n    } as any,\n    pane: ['Point', 'MultiPoint'].includes(geomType) ? 'stateMarkerPane' : 'stateOverlayPane'\n  }\n\n  return (\n    <>\n      <Pane name=\"stateOverlayPane\" style={{ zIndex: 450 }} />\n      <Pane name=\"stateMarkerPane\" style={{ zIndex: 650 }} />\n\n      {features?.map((f, k) => (\n        <GeoJSON\n          key={k}\n          data={f}\n          {...geojsonOpts}\n        />\n      ))}\n    </>\n  )\n}\n\nexport default FeatureManager\n","import { createEntityAdapter, nanoid } from '@reduxjs/toolkit'\nimport { createContext, useContext, useRef } from 'react'\nimport { createStore, useStore } from 'zustand'\nimport { immer } from 'zustand/middleware/immer'\n\ntype MapState = {\n  $wire: any\n  $watch: any\n  state: any\n  config: Record<string, any>\n}\n\ntype MapActions = {\n  setFeatures: (features) => void\n}\n\nconst featuresAdapter = createEntityAdapter()\n\nexport const featuresSelectors = featuresAdapter.getSelectors<any>((state) => state)\n\nconst initialState: MapState = featuresAdapter.getInitialState({\n    $wire: null,\n    $watch: null,\n    state: null,\n    config: {} as any,\n}) satisfies MapState as MapState\n\nconst actions = (set: any, get: any) => ({\n  addFeature: (feature) => set(state => {\n    featuresAdapter.addOne(state, {id: nanoid(), ...feature})\n  }),\n\n  updateFeature: (payload) => set(state => {\n    featuresAdapter.updateOne(state, payload)\n  }),\n\n  removeFeature: (id: string) => set(state => {\n    featuresAdapter.removeOne(state, id)\n  }),\n\n  setFeatures: (features) => set(state => {\n    featuresAdapter.setAll(state, features)\n  }),\n\n  removeFeatures: () => set(state => {\n    featuresAdapter.removeAll(state)\n  })\n}) as MapActions\n\nconst MapStoreContext = createContext(null)\n\nexport const MapStoreProvider = ({ children, value }) => {\n  const storeRef = useRef<any>()\n  if (!storeRef.current) {\n    storeRef.current = createStore<MapState & MapActions>()(immer((set, get) => ({\n      ...initialState,\n      ...value,\n      ...actions(set, get),\n      reset: () => ({\n        ...initialState,\n        ...value,\n      })\n    })))\n  }\n  return (\n    <MapStoreContext.Provider value={storeRef.current}>\n      {children}\n    </MapStoreContext.Provider>\n  )\n}\n\nexport const useMapStore = (selector) => {\n  const store = useContext(MapStoreContext)\n  if (!store) {\n    throw new Error('Missing MapStoreProvider')\n  }\n  return useStore(store, selector) as any\n}\n\nexport default useMapStore\n","import { nanoid } from '@reduxjs/toolkit'\nimport { feature, lineString, point, polygon } from '@turf/helpers'\nimport { getCoords, getType } from '@turf/invariant'\nimport { flattenEach } from '@turf/meta'\n\nfunction setFeaturesByState({ state, setFeatures }) {\n  const type = getType(state)\n\n  if (type === 'MultiPoint') {\n    setFeatures(\n      getCoords(state).map((coord) => ({\n        id: nanoid(),\n        ...point(coord),\n      })),\n    )\n  } else if (type === 'MultiLineString') {\n    setFeatures(\n      getCoords(state).map((coord) => ({\n        id: nanoid(),\n        ...lineString(coord),\n      })),\n    )\n  } else if (type === 'MultiPolygon') {\n    setFeatures(\n      getCoords(state).map((coord) => ({\n        id: nanoid(),\n        ...polygon(coord),\n      })),\n    )\n  } else if (['Point', 'LineString', 'Polygon'].includes(type)) {\n    setFeatures([\n      {\n        id: nanoid(),\n        ...feature(state),\n      },\n    ])\n  } else if(type === 'GeometryCollection'){\n    let newFeatures = [] as any\n    flattenEach(state, (currentFeature) => newFeatures.push({id: nanoid(), ...currentFeature}))\n    setFeatures(newFeatures)\n  }\n}\n\nexport default setFeaturesByState\n","\nimport { circle } from '@turf/circle'\nimport { getGeom } from '@turf/invariant'\nimport { pointOnFeature } from '@turf/point-on-feature'\nimport { isGeoJSONObject, isPoint } from 'geojson-validation'\nimport { toBounds, toLatLng } from '../utils'\n\nfunction zoomToFeatureByState({\n  state,\n  config: { zoomToFeature },\n  map\n}){\n  const geometry = getGeom(state as any)\n\n  if (isPoint(geometry)) {\n    if (zoomToFeature) {\n      const bounds = toBounds(circle(state, 0.25, { steps: 4 })) as any\n      map.fitBounds(bounds, { animate: false })\n    } else {\n      map.panTo(toLatLng(state), { animate: false })\n    }\n\n    return\n  }\n\n  if (isGeoJSONObject(geometry)) {\n    if (zoomToFeature) {\n      const bounds = toBounds(state) as any\n      map.fitBounds(bounds, { animate: false })\n    } else {\n      map.panTo(toLatLng(pointOnFeature(state)))\n    }\n  }\n}\n\nexport default zoomToFeatureByState\n","// @ts-nocheck\nimport L from 'leaflet'\nimport MarkerIcon from 'leaflet/dist/images/marker-icon.png'\nimport MarkerIcon2x from 'leaflet/dist/images/marker-icon-2x.png'\nimport MarkerShadowIcon from 'leaflet/dist/images/marker-shadow.png'\n\nfunction setDefaultIcon(options = {}) {\n  L.Icon.Default.mergeOptions({\n    iconUrl: MarkerIcon as any,\n    iconRetinaUrl: MarkerIcon2x as string,\n    shadowUrl: MarkerShadowIcon as string,\n    ...options\n  })\n}\n\nexport default setDefaultIcon\n","import { getCoord } from '@turf/invariant'\nimport center from '@turf/center';\nimport flip from '@turf/flip';\n\nfunction toLatLng(data: any) {\n  if (!data) return data\n\n  return getCoord(flip(center(data)))\n}\n\nexport default toLatLng\n","import { bbox } from '@turf/bbox'\n\nfunction toBounds(data: any){\n  const arr = bbox(data)\n\n  return [\n    [arr[1], arr[0]],\n    [arr[3], arr[2]]\n  ]\n}\n\nexport default toBounds\n","import {\n  AttributionControl,\n  LayersControl,\n  ScaleControl,\n  TileLayer,\n  ZoomControl,\n} from 'react-leaflet'\nimport { GeomanControls } from 'react-leaflet-geoman-v2'\nimport { FullscreenControl } from '../controls/FullscreenControl'\nimport { useMapStore } from '../hooks/useMapStore'\nimport { map as _map } from 'lodash'\nimport { Fragment, useMemo } from 'react'\nimport DynamicLayer from './DynamicLayer'\n\nconst controlComponents = {\n  zoomControl: ZoomControl,\n  layersControl: LayersControl,\n  drawControl: GeomanControls,\n  attributionControl: AttributionControl,\n  scaleControl: ScaleControl,\n  fullscreenControl: FullscreenControl,\n}\n\nconst defaultDrawControlOptions = {\n  drawMarker: false,\n  drawCircle: false,\n  drawCircleMarker: false,\n  drawPolyline: false,\n  drawRectangle: false,\n  drawPolygon: false,\n  drawText: false,\n\n  editMode: true,\n  dragMode: false,\n  cutPolygon: false,\n  removalMode: true,\n  rotateMode: false,\n}\n\nfunction ControlManager() {\n  const [geomType, layers, baseLayers, _controls] = useMapStore((state) => [\n    state.config.geomType,\n    state.config.layers,\n    state.config.baseLayers,\n    state.config.controls,\n  ])\n\n  const [addFeature, removeFeature, removeFeatures] = useMapStore((state) => [\n    state.addFeature,\n    state.removeFeature,\n    state.removeFeatures,\n  ])\n\n  const handleCreate = (e) => {\n    e.target.removeLayer(e.layer)\n\n    if (['Point', 'LineString', 'Polygon'].includes(geomType)) removeFeatures()\n\n    addFeature(e.layer.toGeoJSON())\n  }\n\n  const handleRemove = ({ layer, target }) => {\n    const id = layer.feature.id\n\n    id && removeFeature(id)\n  }\n\n  const controls = useMemo(() => _map(_controls, (opts, name) => {\n    const Component = controlComponents[name]\n    if (!opts || opts?.enabled == false || !Component) return null\n\n    let options = { ...opts }\n    let children: any = null\n\n    if (name === 'layersControl') {\n\n      children = (\n        <Fragment>\n          {baseLayers?.map(\n            ({ selected = false, title = 'None', ...layerProps }, k) => (\n              <LayersControl.BaseLayer key={k} name={title} checked={selected}>\n                <TileLayer url=\"\" {...layerProps} />\n              </LayersControl.BaseLayer>\n            ),\n          )}\n\n          {layers?.map(\n            ({ selected = false, title = 'None', ...layerProps }, k) => (\n              <LayersControl.Overlay key={k} name={title} checked={selected}>\n                <DynamicLayer\n                  {...(layerProps as any)}\n                  // @ts-ignore\n                  zIndex={100}\n                />\n              </LayersControl.Overlay>\n            ),\n          )}\n        </Fragment>\n      )\n    }\n\n    if (name === 'drawControl') {\n      options = {\n        ...options,\n        options: defaultDrawControlOptions,\n      }\n\n      if (['Point', 'MultiPoint'].includes(geomType)) {\n        options.options = {\n          ...options.options,\n          drawMarker: true,\n          editMode: true,\n          removalMode: true,\n        }\n      } else if (['LineString', 'MultiLineString'].includes(geomType)) {\n        options.options = {\n          ...options.options,\n          drawPolyline: true,\n          editMode: true,\n          dragMode: true,\n          cutPolygon: true,\n          removalMode: true,\n          rotateMode: true,\n        }\n      } else if (['Polygon', 'MultiPolygon'].includes(geomType)) {\n        options.options = {\n          ...options.options,\n          drawRectangle: true,\n          drawPolygon: true,\n          editMode: true,\n          dragMode: true,\n          cutPolygon: true,\n          removalMode: true,\n          rotateMode: true,\n        }\n      } else {\n        options.options = {\n          ...options.options,\n          drawMarker: true,\n          drawCircle: true,\n          drawPolyline: true,\n          drawRectangle: true,\n          drawPolygon: true,\n\n          editMode: true,\n          dragMode: true,\n          cutPolygon: true,\n          removalMode: true,\n          rotateMode: true,\n        }\n      }\n\n      options.onCreate = handleCreate\n      options.onMapRemove = handleRemove\n    }\n\n    return <Component key={name} {...options} children={children} />\n  }).filter((v) => v), [JSON.stringify(_controls)])\n\n  return controls.map((control: any) => control)\n}\n\nexport default ControlManager\n","import { createControlComponent } from '@react-leaflet/core'\nimport { Control, ControlPosition } from 'leaflet'\nimport 'leaflet.fullscreen'\nimport 'leaflet.fullscreen/Control.FullScreen.css'\n\nexport type FullscreenOptions = {\n  content?: string | undefined;\n  position?: ControlPosition | undefined;\n  title?: string | undefined;\n  titleCancel?: string | undefined;\n  forceSeparateButton?: boolean | undefined;\n  forcePseudoFullscreen?: boolean | undefined;\n  fullscreenElement?: false | HTMLElement | undefined;\n}\n\nexport const FullscreenControl = createControlComponent<\n  // @ts-ignore\n  Control.FullScreen,\n  FullscreenOptions\n>(function createFullscreenControl(props) {\n  // @ts-ignore\n  return new Control.FullScreen(props)\n})\n","import { WMSTileLayer } from 'react-leaflet'\nimport { GeoJSON } from '../components/GeoJSON'\nimport { isString } from 'lodash'\nimport GeoJSONAjax from './GeoJSONAjax'\nimport PopupTemplate from './PopupTemplate'\nimport { renderToString } from 'react-dom/server'\nimport L from 'leaflet'\n\ntype TDynamicLayerProps = {\n  type: 'wms' | 'geojson'\n\n  data?: Record<string, any> | string\n  dataUrl?: string\n\n  popupTemplate?: Record<string, any> | string\n  markerOptions?: Record<string, any>\n  polylineOptions?: Record<string, any>\n  polygonOptions?: Record<string, any>\n  rectangleOptions?: Record<string, any>\n}\n\nfunction DynamicLayer(props: TDynamicLayerProps) {\n  const { type, popupTemplate, ...other } = props\n\n  let tplPopupProps = popupTemplate\n    ? isString(popupTemplate)\n      ? { template: popupTemplate }\n      : popupTemplate\n    : {}\n\n  if (type === 'wms') {\n    const opts = {\n      url: '',\n      format: 'image/png',\n      transparent: true,\n      ...other,\n    }\n\n    return <WMSTileLayer {...opts} />\n  }\n\n  if (type === 'geojson') {\n    let opts = {\n      // pmIgnore: true,\n      pointToLayer: (point, latlng) => {\n        let markerOpts = {...other.markerOptions}\n        if(markerOpts.icon) markerOpts.icon = L.icon(markerOpts.icon)\n        return L.marker(latlng, markerOpts);\n      },\n      style: (feature) => {\n        return {\n          ...other.polylineOptions,\n          ...other.polygonOptions,\n          ...other.rectangleOptions,\n        }\n      },\n      onEachFeature: (feature, layer) => {\n        popupTemplate &&\n          layer.bindPopup(() => {\n            return renderToString(\n              <PopupTemplate data={feature?.properties} {...tplPopupProps} />,\n            )\n          })\n      },\n    } as any\n\n    if (other.data) {\n      opts = {\n        ...opts,\n        data: isString(other.data) ? JSON.parse(other.data as any) : other.data,\n      }\n\n      return <GeoJSON {...opts} />\n    }\n\n    if (other.dataUrl) {\n      opts = {\n        ...opts,\n        dataUrl: other.dataUrl,\n      }\n\n      return <GeoJSONAjax {...opts} />\n    }\n  }\n\n  return null\n}\n\nexport default DynamicLayer\n"]}