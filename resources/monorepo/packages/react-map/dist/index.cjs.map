{"version":3,"sources":["../src/components/GeoJSON.tsx","../src/controls/FullscreenControl.tsx","../src/utils/setDefaultIcon.ts","../src/utils/toLatLng.ts","../src/utils/toBounds.ts"],"names":["createElementObject","createPathComponent","extendContext","LeafletGeoJSON","GeoJSON","data","options","ctx","geoJSON","layer","props","prevProps","createControlComponent","Control","FullscreenControl","L","MarkerIcon","MarkerIcon2x","MarkerShadowIcon","setDefaultIcon","setDefaultIcon_default","getCoord","center","flip","toLatLng","toLatLng_default","bbox","toBounds","arr","toBounds_default"],"mappings":"AAAA,OAEE,uBAAAA,EACA,uBAAAC,EACA,iBAAAC,MACK,sBAEP,OAA8B,WAAWC,MAAsB,UAWxD,IAAMC,EAAUH,EACrB,SAAuB,CAAE,KAAAI,EAAM,GAAGC,CAAQ,EAAGC,EAAK,CAChD,IAAMC,EAAU,IAAIL,EAAeE,EAAMC,CAAO,EAChD,OAAON,EACLQ,EACAN,EAAcK,EAAK,CAAE,iBAAkBC,CAAQ,CAAC,CAClD,CACF,EACA,SAAuBC,EAAOC,EAAOC,EAAW,CAC1CD,EAAM,OAASC,EAAU,MAC3BF,EAAM,YAAY,EAAE,QAAQC,EAAM,IAAI,EAGpCA,EAAM,QAAUC,EAAU,QACxBD,EAAM,OAAS,KACjBD,EAAM,WAAW,EAEjBA,EAAM,SAASC,EAAM,KAAK,EAGhC,CACF,ECvCA,OAAS,0BAAAE,MAA8B,sBACvC,OAAS,WAAAC,MAAgC,UACzC,MAAO,qBACP,MAAO,4CAYA,IAAMC,EAAoBF,EAI/B,SAAiCF,EAAO,CAExC,OAAO,IAAIG,EAAQ,WAAWH,CAAK,CACrC,CAAC,ECrBD,OAAOK,MAAO,UACd,OAAOC,MAAgB,sCACvB,OAAOC,MAAkB,yCACzB,OAAOC,MAAsB,wCAE7B,SAASC,EAAeb,EAAU,CAAC,EAAG,CACpCS,EAAE,KAAK,QAAQ,aAAa,CAC1B,QAASC,EACT,cAAeC,EACf,UAAWC,EACX,GAAGZ,CACL,CAAC,CACH,CAEA,IAAOc,EAAQD,ECff,OAAS,YAAAE,MAAgB,kBACzB,OAAOC,MAAY,eACnB,OAAOC,MAAU,aAEjB,SAASC,EAASnB,EAAW,CAC3B,OAAKA,GAEEgB,EAASE,EAAKD,EAAOjB,CAAI,CAAC,CAAC,CACpC,CAEA,IAAOoB,EAAQD,ECVf,OAAS,QAAAE,MAAY,aAErB,SAASC,EAAStB,EAAU,CAC1B,IAAMuB,EAAMF,EAAKrB,CAAI,EAErB,MAAO,CACL,CAACuB,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EACf,CAACA,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACjB,CACF,CAEA,IAAOC,EAAQF","sourcesContent":["import {\n  type PathProps,\n  createElementObject,\n  createPathComponent,\n  extendContext,\n} from '@react-leaflet/core'\nimport type { GeoJsonObject } from 'geojson'\nimport { type GeoJSONOptions, GeoJSON as LeafletGeoJSON } from 'leaflet'\n\nimport type { LayerGroupProps } from 'react-leaflet'\n\nexport interface GeoJSONProps\n  extends GeoJSONOptions,\n    LayerGroupProps,\n    PathProps {\n  data: GeoJsonObject\n}\n\nexport const GeoJSON = createPathComponent<LeafletGeoJSON, GeoJSONProps>(\n  function createGeoJSON({ data, ...options }, ctx) {\n    const geoJSON = new LeafletGeoJSON(data, options)\n    return createElementObject(\n      geoJSON,\n      extendContext(ctx, { overlayContainer: geoJSON }),\n    )\n  },\n  function updateGeoJSON(layer, props, prevProps) {\n    if (props.data !== prevProps.data) {\n      layer.clearLayers().addData(props.data);\n    }\n\n    if (props.style !== prevProps.style) {\n      if (props.style == null) {\n        layer.resetStyle()\n      } else {\n        layer.setStyle(props.style)\n      }\n    }\n  },\n)\n","import { createControlComponent } from '@react-leaflet/core'\nimport { Control, ControlPosition } from 'leaflet'\nimport 'leaflet.fullscreen'\nimport 'leaflet.fullscreen/Control.FullScreen.css'\n\nexport type FullscreenOptions = {\n  content?: string | undefined;\n  position?: ControlPosition | undefined;\n  title?: string | undefined;\n  titleCancel?: string | undefined;\n  forceSeparateButton?: boolean | undefined;\n  forcePseudoFullscreen?: boolean | undefined;\n  fullscreenElement?: false | HTMLElement | undefined;\n}\n\nexport const FullscreenControl = createControlComponent<\n  // @ts-ignore\n  Control.FullScreen,\n  FullscreenOptions\n>(function createFullscreenControl(props) {\n  // @ts-ignore\n  return new Control.FullScreen(props)\n})\n","// @ts-nocheck\nimport L from 'leaflet'\nimport MarkerIcon from 'leaflet/dist/images/marker-icon.png'\nimport MarkerIcon2x from 'leaflet/dist/images/marker-icon-2x.png'\nimport MarkerShadowIcon from 'leaflet/dist/images/marker-shadow.png'\n\nfunction setDefaultIcon(options = {}) {\n  L.Icon.Default.mergeOptions({\n    iconUrl: MarkerIcon as any,\n    iconRetinaUrl: MarkerIcon2x as string,\n    shadowUrl: MarkerShadowIcon as string,\n    ...options\n  })\n}\n\nexport default setDefaultIcon\n","import { getCoord } from '@turf/invariant'\nimport center from '@turf/center';\nimport flip from '@turf/flip';\n\nfunction toLatLng(data: any) {\n  if (!data) return data\n\n  return getCoord(flip(center(data)))\n}\n\nexport default toLatLng\n","import { bbox } from '@turf/bbox'\n\nfunction toBounds(data: any){\n  const arr = bbox(data)\n\n  return [\n    [arr[1], arr[0]],\n    [arr[3], arr[2]]\n  ]\n}\n\nexport default toBounds\n"]}