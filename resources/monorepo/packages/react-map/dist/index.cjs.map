{"version":3,"sources":["../src/components/GeoJSON.tsx","../src/components/PopupTemplate.tsx","../src/components/GeoJSONAjax.tsx","../src/components/FeatureManager.tsx","../src/hooks/useMapStore.tsx","../src/utils/setFeaturesByState.ts","../src/utils/zoomToFeatureByState.ts","../src/utils/setDefaultIcon.ts","../src/utils/toLatLng.ts","../src/utils/toBounds.ts","../src/components/ControlManager.tsx","../src/controls/FullscreenControl.tsx","../src/components/DynamicLayer.tsx"],"names":["template","jsx","getCoord","getCoords","getGeom","getType","get","useEffect","feature","nanoid","L","state","point","_map","isString","jsxs"],"mappings":"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","sourcesContent":["import {\n  type PathProps,\n  createElementObject,\n  createPathComponent,\n  extendContext,\n} from '@react-leaflet/core'\nimport type { GeoJsonObject } from 'geojson'\nimport { type GeoJSONOptions, GeoJSON as LeafletGeoJSON } from 'leaflet'\n\nimport type { LayerGroupProps } from 'react-leaflet'\n\nexport interface GeoJSONProps\n  extends GeoJSONOptions,\n    LayerGroupProps,\n    PathProps {\n  data: GeoJsonObject\n}\n\nexport const GeoJSON = createPathComponent<LeafletGeoJSON, GeoJSONProps>(\n  function createGeoJSON({ data, ...options }, ctx) {\n    const geoJSON = new LeafletGeoJSON(data, options)\n    return createElementObject(\n      geoJSON,\n      extendContext(ctx, { overlayContainer: geoJSON }),\n    )\n  },\n  function updateGeoJSON(layer, props, prevProps) {\n    if (props.data !== prevProps.data) {\n      layer.clearLayers().addData(props.data);\n    }\n\n    if (props.style !== prevProps.style) {\n      if (props.style == null) {\n        layer.resetStyle()\n      } else {\n        layer.setStyle(props.style)\n      }\n    }\n  },\n)\n","import { get, isArray, isString, template } from 'lodash'\n\ntype TPopupTemplate = {\n  heading?: ''\n  content?: Record<string, any> | string\n  data: Record<string, any>\n  template?: string\n}\n\nconst tpl = (str, data) => str ? template(str, { interpolate: /{{([\\s\\S]+?)}}/g })(data) : ''\n\nfunction PopupTemplate(props: TPopupTemplate) {\n  const { template, heading, content, data } = props\n\n  if (template) return <div dangerouslySetInnerHTML={{__html: tpl(template, data)}} />\n\n  return (\n    <div>\n      <div className=\"pc-heading\">{tpl(heading, data)}</div>\n      <hr />\n      {isArray(content) ? (\n        <div>\n          {content?.map((c, k) => (\n            <div key={k}>\n              <span className='pc-content-label'>{c.label}: </span>\n              {get(data, c.value)}\n            </div>\n          ))}\n        </div>\n      ) : <div dangerouslySetInnerHTML={{__html: tpl(content, data)}} />}\n\n    </div>\n  )\n}\n\nexport default PopupTemplate\n","import { useEffect, useState } from 'react'\nimport { GeoJSON } from './GeoJSON'\nimport { isFunction } from 'lodash'\n\ntype TGeoJSONAjax = {\n  dataUrl: string\n  pmIgnore?: boolean\n  children?: any\n}\n\nfunction GeoJSONAjax(props: TGeoJSONAjax) {\n  const { dataUrl, children, ...opts } = props\n\n  const [enabled, setEnabled] = useState(false)\n  const [data, setData] = useState(null as any)\n\n  useEffect(() => {\n    if (enabled && dataUrl) {\n      fetch(dataUrl)\n        .then((resp) => resp.json())\n        .then((resp) => {\n          setData(resp)\n        })\n    }\n  }, [enabled, dataUrl])\n\n  return (\n    <GeoJSON\n      {...opts}\n      data={data}\n      eventHandlers={{\n        add: (event) => {\n          setEnabled(true)\n        },\n        remove: (event) => {\n          setEnabled(false)\n        },\n      }}\n    >\n      {isFunction(children) && data && children(data)}\n    </GeoJSON>\n  )\n}\n\nexport default GeoJSONAjax\n","import {\n  geometryCollection,\n  multiLineString,\n  multiPoint,\n  multiPolygon,\n} from '@turf/helpers'\nimport { getCoord, getCoords, getGeom, getType } from '@turf/invariant'\nimport { featureEach } from '@turf/meta'\nimport { map as _map, get, last } from 'lodash'\nimport { useEffect } from 'react'\nimport { useMap } from 'react-leaflet'\nimport { featuresSelectors, useMapStore } from '../hooks/useMapStore'\nimport { useUpdateEffect } from 'react-use'\nimport setFeaturesByState from '../utils/setFeaturesByState'\nimport zoomToFeatureByState from '../utils/zoomToFeatureByState'\nimport { GeoJSON } from '../components/GeoJSON'\nimport L from 'leaflet'\n\nfunction FeatureManager() {\n  const map = useMap()\n  const [\n    state,\n    $wire,\n    geomType,\n    latitudeField,\n    longitudeField,\n    drawField,\n    zoomToFeature,\n    markerOptions,\n    polylineOptions,\n    polygonOptions,\n    features,\n    updateFeature,\n    setFeatures,\n    removeFeature,\n  ] = useMapStore((state: any) => [\n    state.state,\n    state.$wire,\n    state.config.geomType,\n    state.config.latitudeField,\n    state.config.longitudeField,\n    state.config.drawField,\n    state.config.zoomToFeature,\n    state.config.markerOptions,\n    state.config.polylineOptions,\n    state.config.polygonOptions,\n    featuresSelectors.selectAll(state),\n    state.updateFeature,\n    state.setFeatures,\n    state.removeFeature,\n  ])\n\n  useEffect(() => {\n    if (!state) return\n\n    setFeaturesByState({\n      state,\n      setFeatures,\n    })\n\n    zoomToFeatureByState({\n      state,\n      config: { zoomToFeature },\n      map,\n    })\n  }, [])\n\n  useUpdateEffect(() => {\n    if (features?.length) {\n      if (\n        ['Point', 'LineString', 'Polygon'].includes(geomType) &&\n        features?.length === 1\n      ) {\n        const geometry = getGeom(last(features) as any)\n\n        if (geomType === 'Point') {\n          const coords = getCoord(geometry)\n          latitudeField && $wire.set(latitudeField, coords[1], false)\n          longitudeField && $wire.set(longitudeField, coords[0], false)\n        }\n\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      } else if (geomType === 'MultiPoint') {\n        const geometry = getGeom(multiPoint(_map(features, (i) => getCoord(i))))\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      } else if (geomType === 'MultiLineString') {\n        const geometry = getGeom(\n          multiLineString(_map(features, (i) => getCoords(i))),\n        )\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      } else if (geomType === 'MultiPolygon') {\n        const geometry = getGeom(\n          multiPolygon(_map(features, (i) => getCoords(i))),\n        )\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      } else if (geomType === 'GeometryCollection') {\n        const geometry = getGeom(\n          geometryCollection(_map(features, (i) => getGeom(i))),\n        )\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      }\n    } else {\n      drawField && $wire.set(drawField, '', false)\n    }\n  }, [JSON.stringify(features)])\n\n  return features?.map((f, k) => (\n    <GeoJSON\n      key={k}\n      data={f}\n      pointToLayer={(point, latlng) => {\n        let markerOpts = {...markerOptions}\n        if(markerOpts.icon) markerOpts.icon = L.icon(markerOpts.icon)\n        return L.marker(latlng, markerOpts);\n      }}\n      style={() => {\n        return {...polylineOptions, ...polygonOptions}\n      }}\n      eventHandlers={\n        {\n          'pm:update': ({ layer, target }) => {\n            featureEach(target.toGeoJSON(), (feature, index) => {\n              updateFeature({\n                id: feature.id,\n                changes: feature,\n              })\n            })\n          },\n\n          'pm:cut': (e) => {\n            map.removeLayer(e.layer)\n\n            const id = get(e, 'originalLayer.feature.id')\n            removeFeature(id)\n\n            const type = getType(e.layer.toGeoJSON())\n            const geometry = getGeom(\n              type === geomType\n                ? e.layer.toGeoJSON()\n                : e.originalLayer.toGeoJSON(),\n            )\n\n            setFeaturesByState({\n              state: geometry,\n              setFeatures,\n            })\n          },\n        } as any\n      }\n    />\n  ))\n}\n\nexport default FeatureManager\n","import { createEntityAdapter, nanoid } from '@reduxjs/toolkit'\nimport { createContext, useContext, useRef } from 'react'\nimport { createStore, useStore } from 'zustand'\nimport { immer } from 'zustand/middleware/immer'\n\ntype MapState = {\n  $wire: any\n  $watch: any\n  state: any\n  config: Record<string, any>\n}\n\ntype MapActions = {\n  setFeatures: (features) => void\n}\n\nconst featuresAdapter = createEntityAdapter()\n\nexport const featuresSelectors = featuresAdapter.getSelectors<any>((state) => state)\n\nconst initialState: MapState = featuresAdapter.getInitialState({\n    $wire: null,\n    $watch: null,\n    state: null,\n    config: {} as any,\n}) satisfies MapState as MapState\n\nconst actions = (set: any, get: any) => ({\n  addFeature: (feature) => set(state => {\n    featuresAdapter.addOne(state, {id: nanoid(), ...feature})\n  }),\n\n  updateFeature: (payload) => set(state => {\n    featuresAdapter.updateOne(state, payload)\n  }),\n\n  removeFeature: (id: string) => set(state => {\n    featuresAdapter.removeOne(state, id)\n  }),\n\n  setFeatures: (features) => set(state => {\n    featuresAdapter.setAll(state, features)\n  }),\n\n  removeFeatures: () => set(state => {\n    featuresAdapter.removeAll(state)\n  })\n}) as MapActions\n\nconst MapStoreContext = createContext(null)\n\nexport const MapStoreProvider = ({ children, value }) => {\n  const storeRef = useRef<any>()\n  if (!storeRef.current) {\n    storeRef.current = createStore<MapState & MapActions>()(immer((set, get) => ({\n      ...initialState,\n      ...value,\n      ...actions(set, get),\n      reset: () => ({\n        ...initialState,\n        ...value,\n      })\n    })))\n  }\n  return (\n    <MapStoreContext.Provider value={storeRef.current}>\n      {children}\n    </MapStoreContext.Provider>\n  )\n}\n\nexport const useMapStore = (selector) => {\n  const store = useContext(MapStoreContext)\n  if (!store) {\n    throw new Error('Missing MapStoreProvider')\n  }\n  return useStore(store, selector) as any\n}\n\nexport default useMapStore\n","import { nanoid } from '@reduxjs/toolkit'\nimport { feature, lineString, point, polygon } from '@turf/helpers'\nimport { getCoords, getType } from '@turf/invariant'\nimport { flattenEach } from '@turf/meta'\n\nfunction setFeaturesByState({ state, setFeatures }) {\n  const type = getType(state)\n\n  if (type === 'MultiPoint') {\n    setFeatures(\n      getCoords(state).map((coord) => ({\n        id: nanoid(),\n        ...point(coord),\n      })),\n    )\n  } else if (type === 'MultiLineString') {\n    setFeatures(\n      getCoords(state).map((coord) => ({\n        id: nanoid(),\n        ...lineString(coord),\n      })),\n    )\n  } else if (type === 'MultiPolygon') {\n    setFeatures(\n      getCoords(state).map((coord) => ({\n        id: nanoid(),\n        ...polygon(coord),\n      })),\n    )\n  } else if (['Point', 'LineString', 'Polygon'].includes(type)) {\n    setFeatures([\n      {\n        id: nanoid(),\n        ...feature(state),\n      },\n    ])\n  } else if(type === 'GeometryCollection'){\n    let newFeatures = [] as any\n    flattenEach(state, (currentFeature) => newFeatures.push({id: nanoid(), ...currentFeature}))\n    setFeatures(newFeatures)\n  }\n}\n\nexport default setFeaturesByState\n","\nimport { circle } from '@turf/circle'\nimport { getGeom } from '@turf/invariant'\nimport { pointOnFeature } from '@turf/point-on-feature'\nimport { isGeoJSONObject, isPoint } from 'geojson-validation'\nimport { toBounds, toLatLng } from '../utils'\n\nfunction zoomToFeatureByState({\n  state,\n  config: { zoomToFeature },\n  map\n}){\n  const geometry = getGeom(state as any)\n\n  if (isPoint(geometry)) {\n    if (zoomToFeature) {\n      const bounds = toBounds(circle(state, 0.25, { steps: 4 })) as any\n      map.fitBounds(bounds, { animate: false })\n    } else {\n      map.panTo(toLatLng(state), { animate: false })\n    }\n\n    return\n  }\n\n  if (isGeoJSONObject(geometry)) {\n    if (zoomToFeature) {\n      const bounds = toBounds(state) as any\n      map.fitBounds(bounds, { animate: false })\n    } else {\n      map.panTo(toLatLng(pointOnFeature(state)))\n    }\n  }\n}\n\nexport default zoomToFeatureByState\n","// @ts-nocheck\nimport L from 'leaflet'\nimport MarkerIcon from 'leaflet/dist/images/marker-icon.png'\nimport MarkerIcon2x from 'leaflet/dist/images/marker-icon-2x.png'\nimport MarkerShadowIcon from 'leaflet/dist/images/marker-shadow.png'\n\nfunction setDefaultIcon(options = {}) {\n  L.Icon.Default.mergeOptions({\n    iconUrl: MarkerIcon as any,\n    iconRetinaUrl: MarkerIcon2x as string,\n    shadowUrl: MarkerShadowIcon as string,\n    ...options\n  })\n}\n\nexport default setDefaultIcon\n","import { getCoord } from '@turf/invariant'\nimport center from '@turf/center';\nimport flip from '@turf/flip';\n\nfunction toLatLng(data: any) {\n  if (!data) return data\n\n  return getCoord(flip(center(data)))\n}\n\nexport default toLatLng\n","import { bbox } from '@turf/bbox'\n\nfunction toBounds(data: any){\n  const arr = bbox(data)\n\n  return [\n    [arr[1], arr[0]],\n    [arr[3], arr[2]]\n  ]\n}\n\nexport default toBounds\n","import {\n  AttributionControl,\n  LayersControl,\n  ScaleControl,\n  TileLayer,\n  ZoomControl,\n} from 'react-leaflet'\nimport { GeomanControls } from 'react-leaflet-geoman-v2'\nimport { FullscreenControl } from '../controls/FullscreenControl'\nimport { useMapStore } from '../hooks/useMapStore'\nimport { map as _map } from 'lodash'\nimport { Fragment, useMemo } from 'react'\nimport DynamicLayer from './DynamicLayer'\n\nconst controlComponents = {\n  zoomControl: ZoomControl,\n  layersControl: LayersControl,\n  drawControl: GeomanControls,\n  attributionControl: AttributionControl,\n  scaleControl: ScaleControl,\n  fullscreenControl: FullscreenControl,\n}\n\nconst defaultDrawControlOptions = {\n  drawMarker: false,\n  drawCircle: false,\n  drawCircleMarker: false,\n  drawPolyline: false,\n  drawRectangle: false,\n  drawPolygon: false,\n  drawText: false,\n\n  editMode: true,\n  dragMode: false,\n  cutPolygon: false,\n  removalMode: true,\n  rotateMode: false,\n}\n\nfunction ControlManager() {\n  const [geomType, layers, baseLayers, _controls] = useMapStore((state) => [\n    state.config.geomType,\n    state.config.layers,\n    state.config.baseLayers,\n    state.config.controls,\n  ])\n\n  const [addFeature, removeFeature, removeFeatures] = useMapStore((state) => [\n    state.addFeature,\n    state.removeFeature,\n    state.removeFeatures,\n  ])\n\n  const handleCreate = (e) => {\n    e.target.removeLayer(e.layer)\n\n    if (['Point', 'LineString', 'Polygon'].includes(geomType)) removeFeatures()\n\n    addFeature(e.layer.toGeoJSON())\n  }\n\n  const handleRemove = ({ layer, target }) => {\n    const id = layer.feature.id\n\n    id && removeFeature(id)\n  }\n\n  const controls = useMemo(() => _map(_controls, (opts, name) => {\n    const Component = controlComponents[name]\n    if (!opts || opts?.enabled == false || !Component) return null\n\n    let options = { ...opts }\n    let children: any = null\n\n    if (name === 'layersControl') {\n\n      children = (\n        <Fragment>\n          {baseLayers?.map(\n            ({ selected = false, title = 'None', ...layerProps }, k) => (\n              <LayersControl.BaseLayer key={k} name={title} checked={selected}>\n                <TileLayer url=\"\" {...layerProps} />\n              </LayersControl.BaseLayer>\n            ),\n          )}\n\n          {layers?.map(\n            ({ selected = false, title = 'None', ...layerProps }, k) => (\n              <LayersControl.Overlay key={k} name={title} checked={selected}>\n                <DynamicLayer {...(layerProps as any)} />\n              </LayersControl.Overlay>\n            ),\n          )}\n        </Fragment>\n      )\n    }\n\n    if (name === 'drawControl') {\n      options = {\n        ...options,\n        options: defaultDrawControlOptions,\n      }\n\n      if (['Point', 'MultiPoint'].includes(geomType)) {\n        options.options = {\n          ...options.options,\n          drawMarker: true,\n          editMode: true,\n          removalMode: true,\n        }\n      } else if (['LineString', 'MultiLineString'].includes(geomType)) {\n        options.options = {\n          ...options.options,\n          drawPolyline: true,\n          editMode: true,\n          dragMode: true,\n          cutPolygon: true,\n          removalMode: true,\n          rotateMode: true,\n        }\n      } else if (['Polygon', 'MultiPolygon'].includes(geomType)) {\n        options.options = {\n          ...options.options,\n          drawRectangle: true,\n          drawPolygon: true,\n          editMode: true,\n          dragMode: true,\n          cutPolygon: true,\n          removalMode: true,\n          rotateMode: true,\n        }\n      } else {\n        options.options = {\n          ...options.options,\n          drawMarker: true,\n          drawCircle: true,\n          drawPolyline: true,\n          drawRectangle: true,\n          drawPolygon: true,\n\n          editMode: true,\n          dragMode: true,\n          cutPolygon: true,\n          removalMode: true,\n          rotateMode: true,\n        }\n      }\n\n      options.onCreate = handleCreate\n      options.onMapRemove = handleRemove\n    }\n\n    return <Component key={name} {...options} children={children} />\n  }).filter((v) => v), [JSON.stringify(_controls)])\n\n  return controls.map((control: any) => control)\n}\n\nexport default ControlManager\n","import { createControlComponent } from '@react-leaflet/core'\nimport { Control, ControlPosition } from 'leaflet'\nimport 'leaflet.fullscreen'\nimport 'leaflet.fullscreen/Control.FullScreen.css'\n\nexport type FullscreenOptions = {\n  content?: string | undefined;\n  position?: ControlPosition | undefined;\n  title?: string | undefined;\n  titleCancel?: string | undefined;\n  forceSeparateButton?: boolean | undefined;\n  forcePseudoFullscreen?: boolean | undefined;\n  fullscreenElement?: false | HTMLElement | undefined;\n}\n\nexport const FullscreenControl = createControlComponent<\n  // @ts-ignore\n  Control.FullScreen,\n  FullscreenOptions\n>(function createFullscreenControl(props) {\n  // @ts-ignore\n  return new Control.FullScreen(props)\n})\n","import { WMSTileLayer } from 'react-leaflet'\nimport { GeoJSON } from '../components/GeoJSON'\nimport { isString } from 'lodash'\nimport GeoJSONAjax from './GeoJSONAjax'\nimport PopupTemplate from './PopupTemplate'\nimport { renderToString } from 'react-dom/server'\nimport L from 'leaflet'\n\ntype TDynamicLayerProps = {\n  type: 'wms' | 'geojson'\n\n  data?: Record<string, any> | string\n  dataUrl?: string\n\n  popupTemplate?: Record<string, any> | string\n  markerOptions?: Record<string, any>\n  polylineOptions?: Record<string, any>\n  polygonOptions?: Record<string, any>\n}\n\nfunction DynamicLayer(props: TDynamicLayerProps) {\n  const { type, popupTemplate, ...other } = props\n\n  let tplPopupProps = popupTemplate\n    ? isString(popupTemplate)\n      ? { template: popupTemplate }\n      : popupTemplate\n    : {}\n\n  if (type === 'wms') {\n    const opts = {\n      url: '',\n      format: 'image/png',\n      transparent: true,\n      ...other,\n    }\n\n    return <WMSTileLayer {...opts} />\n  }\n\n  if (type === 'geojson') {\n    let opts = {\n      // pmIgnore: true,\n      pointToLayer: (point, latlng) => {\n        let markerOpts = {...other.markerOptions}\n        if(markerOpts.icon) markerOpts.icon = L.icon(markerOpts.icon)\n        return L.marker(latlng, markerOpts);\n      },\n      style: (feature) => {\n        return {\n          ...other.polylineOptions,\n          ...other.polygonOptions,\n        }\n      },\n      onEachFeature: (feature, layer) => {\n        popupTemplate &&\n          layer.bindPopup(() => {\n            return renderToString(\n              <PopupTemplate data={feature?.properties} {...tplPopupProps} />,\n            )\n          })\n      },\n    } as any\n\n    if (other.data) {\n      opts = {\n        ...opts,\n        data: isString(other.data) ? JSON.parse(other.data as any) : other.data,\n      }\n\n      return <GeoJSON {...opts} />\n    }\n\n    if (other.dataUrl) {\n      opts = {\n        ...opts,\n        dataUrl: other.dataUrl,\n      }\n\n      return <GeoJSONAjax {...opts} />\n    }\n  }\n\n  return null\n}\n\nexport default DynamicLayer\n"]}