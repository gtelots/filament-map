{"version":3,"sources":["../src/components/GeoJSON.tsx","../src/components/PopupTemplate.tsx","../src/components/GeoJSONAjax.tsx","../src/components/FeatureManager.tsx","../src/hooks/useMapStore.tsx","../src/utils/setFeaturesByState.ts","../src/utils/zoomToFeatureByState.ts","../src/utils/setDefaultIcon.ts","../src/utils/toLatLng.ts","../src/utils/toBounds.ts","../src/components/ControlManager.tsx","../src/controls/FullscreenControl.tsx","../src/components/DynamicLayer.tsx"],"names":["createElementObject","createPathComponent","extendContext","LeafletGeoJSON","GeoJSON","data","options","ctx","geoJSON","layer","props","prevProps","get","isArray","template","jsx","jsxs","tpl","str","PopupTemplate","heading","content","c","k","PopupTemplate_default","useEffect","useState","isFunction","GeoJSONAjax","dataUrl","children","opts","setData","resp","GeoJSONAjax_default","geometryCollection","multiLineString","multiPoint","multiPolygon","getCoord","getCoords","getGeom","getType","featureEach","_map","last","useMap","createEntityAdapter","nanoid","createContext","useContext","useRef","createStore","useStore","immer","featuresAdapter","featuresSelectors","state","initialState","actions","set","feature","payload","id","features","MapStoreContext","MapStoreProvider","value","storeRef","useMapStore","selector","store","useUpdateEffect","lineString","point","polygon","flattenEach","setFeaturesByState","setFeatures","type","coord","newFeatures","currentFeature","setFeaturesByState_default","circle","pointOnFeature","isGeoJSONObject","isPoint","L","MarkerIcon","MarkerIcon2x","MarkerShadowIcon","setDefaultIcon","setDefaultIcon_default","center","flip","toLatLng","toLatLng_default","bbox","toBounds","arr","toBounds_default","zoomToFeatureByState","zoomToFeature","map","geometry","bounds","zoomToFeatureByState_default","FeatureManager","$wire","geomType","latitudeField","longitudeField","drawField","updateFeature","removeFeature","coords","i","f","target","index","e","FeatureManager_default","AttributionControl","LayersControl","ScaleControl","TileLayer","ZoomControl","GeomanControls","createControlComponent","Control","FullscreenControl","Fragment","useMemo","WMSTileLayer","isString","renderToString","DynamicLayer","popupTemplate","other","tplPopupProps","DynamicLayer_default","controlComponents","defaultDrawControlOptions","ControlManager","layers","baseLayers","_controls","addFeature","removeFeatures","handleCreate","handleRemove","name","Component","selected","title","layerProps","v","control","ControlManager_default"],"mappings":"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","sourcesContent":["import {\n  type PathProps,\n  createElementObject,\n  createPathComponent,\n  extendContext,\n} from '@react-leaflet/core'\nimport type { GeoJsonObject } from 'geojson'\nimport { type GeoJSONOptions, GeoJSON as LeafletGeoJSON } from 'leaflet'\n\nimport type { LayerGroupProps } from 'react-leaflet'\n\nexport interface GeoJSONProps\n  extends GeoJSONOptions,\n    LayerGroupProps,\n    PathProps {\n  data: GeoJsonObject\n}\n\nexport const GeoJSON = createPathComponent<LeafletGeoJSON, GeoJSONProps>(\n  function createGeoJSON({ data, ...options }, ctx) {\n    const geoJSON = new LeafletGeoJSON(data, options)\n    return createElementObject(\n      geoJSON,\n      extendContext(ctx, { overlayContainer: geoJSON }),\n    )\n  },\n  function updateGeoJSON(layer, props, prevProps) {\n    if (props.data !== prevProps.data) {\n      layer.clearLayers().addData(props.data);\n    }\n\n    if (props.style !== prevProps.style) {\n      if (props.style == null) {\n        layer.resetStyle()\n      } else {\n        layer.setStyle(props.style)\n      }\n    }\n  },\n)\n","import { get, isArray, isString, template } from 'lodash'\n\ntype TPopupTemplate = {\n  heading?: ''\n  content?: Record<string, any> | string\n  data: Record<string, any>\n  template?: string\n}\n\nconst tpl = (str, data) => str ? template(str, { interpolate: /{{([\\s\\S]+?)}}/g })(data) : ''\n\nfunction PopupTemplate(props: TPopupTemplate) {\n  const { template, heading, content, data } = props\n\n  if (template) return <div dangerouslySetInnerHTML={{__html: tpl(template, data)}} />\n\n  return (\n    <div>\n      <div className=\"pc-heading\">{tpl(heading, data)}</div>\n      <hr />\n      {isArray(content) ? (\n        <div>\n          {content?.map((c, k) => (\n            <div key={k}>\n              <span className='pc-content-label'>{c.label}: </span>\n              {get(data, c.value)}\n            </div>\n          ))}\n        </div>\n      ) : <div dangerouslySetInnerHTML={{__html: tpl(content, data)}} />}\n\n    </div>\n  )\n}\n\nexport default PopupTemplate\n","import { useEffect, useState } from 'react'\nimport { GeoJSON } from './GeoJSON'\nimport { isFunction } from 'lodash'\n\ntype TGeoJSONAjax = {\n  dataUrl: string\n  pmIgnore?: boolean\n  children?: any\n}\n\nfunction GeoJSONAjax(props: TGeoJSONAjax) {\n  const { dataUrl, children, ...opts } = props\n\n  const [data, setData] = useState(null as any)\n\n  useEffect(() => {\n    if (dataUrl) {\n      fetch(dataUrl)\n        .then((resp) => resp.json())\n        .then((resp) => {\n          setData(resp)\n        })\n    }\n  }, [dataUrl])\n\n  return (\n    <GeoJSON {...opts} data={data}>\n      {isFunction(children) && data && children(data)}\n    </GeoJSON>\n  )\n}\n\nexport default GeoJSONAjax\n","import {\n  geometryCollection,\n  multiLineString,\n  multiPoint,\n  multiPolygon,\n} from '@turf/helpers'\nimport { getCoord, getCoords, getGeom, getType } from '@turf/invariant'\nimport { featureEach } from '@turf/meta'\nimport { map as _map, get, last } from 'lodash'\nimport { useEffect } from 'react'\nimport { useMap } from 'react-leaflet'\nimport { featuresSelectors, useMapStore } from '../hooks/useMapStore'\nimport { useUpdateEffect } from 'react-use'\nimport setFeaturesByState from '../utils/setFeaturesByState'\nimport zoomToFeatureByState from '../utils/zoomToFeatureByState'\nimport { GeoJSON } from '../components/GeoJSON'\n\nfunction FeatureManager() {\n  const map = useMap()\n  const [\n    state,\n    $wire,\n    geomType,\n    latitudeField,\n    longitudeField,\n    drawField,\n    zoomToFeature,\n    features,\n    updateFeature,\n    setFeatures,\n    removeFeature,\n  ] = useMapStore((state: any) => [\n    state.state,\n    state.$wire,\n    state.config.geomType,\n    state.config.latitudeField,\n    state.config.longitudeField,\n    state.config.drawField,\n    state.config.zoomToFeature,\n    featuresSelectors.selectAll(state),\n    state.updateFeature,\n    state.setFeatures,\n    state.removeFeature,\n  ])\n\n  useEffect(() => {\n    if (!state) return\n\n    setFeaturesByState({\n      state,\n      setFeatures,\n    })\n\n    zoomToFeatureByState({\n      state,\n      config: { zoomToFeature },\n      map,\n    })\n  }, [])\n\n  useUpdateEffect(() => {\n    if (features?.length) {\n      if (\n        ['Point', 'LineString', 'Polygon'].includes(geomType) &&\n        features?.length === 1\n      ) {\n        const geometry = getGeom(last(features) as any)\n\n        if (geomType === 'Point') {\n          const coords = getCoord(geometry)\n          latitudeField && $wire.set(latitudeField, coords[1], false)\n          longitudeField && $wire.set(longitudeField, coords[0], false)\n        }\n\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      } else if (geomType === 'MultiPoint') {\n        const geometry = getGeom(multiPoint(_map(features, (i) => getCoord(i))))\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      } else if (geomType === 'MultiLineString') {\n        const geometry = getGeom(\n          multiLineString(_map(features, (i) => getCoords(i))),\n        )\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      } else if (geomType === 'MultiPolygon') {\n        const geometry = getGeom(\n          multiPolygon(_map(features, (i) => getCoords(i))),\n        )\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      } else if (geomType === 'GeometryCollection') {\n        const geometry = getGeom(\n          geometryCollection(_map(features, (i) => getGeom(i))),\n        )\n        drawField && $wire.set(drawField, JSON.stringify(geometry), false)\n      }\n    } else {\n      drawField && $wire.set(drawField, '', false)\n    }\n  }, [JSON.stringify(features)])\n\n  return features?.map((f, k) => (\n    <GeoJSON\n      key={k}\n      data={f}\n      eventHandlers={\n        {\n          'pm:update': ({ layer, target }) => {\n            featureEach(target.toGeoJSON(), (feature, index) => {\n              updateFeature({\n                id: feature.id,\n                changes: feature,\n              })\n            })\n          },\n\n          'pm:cut': (e) => {\n            map.removeLayer(e.layer)\n\n            const id = get(e, 'originalLayer.feature.id')\n            removeFeature(id)\n\n            const type = getType(e.layer.toGeoJSON())\n            const geometry = getGeom(\n              type === geomType\n                ? e.layer.toGeoJSON()\n                : e.originalLayer.toGeoJSON(),\n            )\n\n            setFeaturesByState({\n              state: geometry,\n              setFeatures,\n            })\n          },\n        } as any\n      }\n    />\n  ))\n}\n\nexport default FeatureManager\n","import { createEntityAdapter, nanoid } from '@reduxjs/toolkit'\nimport { createContext, useContext, useRef } from 'react'\nimport { createStore, useStore } from 'zustand'\nimport { immer } from 'zustand/middleware/immer'\n\ntype MapState = {\n  $wire: any\n  $watch: any\n  state: any\n  config: Record<string, any>\n}\n\ntype MapActions = {\n  setFeatures: (features) => void\n}\n\nconst featuresAdapter = createEntityAdapter()\n\nexport const featuresSelectors = featuresAdapter.getSelectors<any>((state) => state)\n\nconst initialState: MapState = featuresAdapter.getInitialState({\n    $wire: null,\n    $watch: null,\n    state: null,\n    config: {} as any,\n}) satisfies MapState as MapState\n\nconst actions = (set: any, get: any) => ({\n  addFeature: (feature) => set(state => {\n    featuresAdapter.addOne(state, {id: nanoid(), ...feature})\n  }),\n\n  updateFeature: (payload) => set(state => {\n    featuresAdapter.updateOne(state, payload)\n  }),\n\n  removeFeature: (id: string) => set(state => {\n    featuresAdapter.removeOne(state, id)\n  }),\n\n  setFeatures: (features) => set(state => {\n    featuresAdapter.setAll(state, features)\n  }),\n\n  removeFeatures: () => set(state => {\n    featuresAdapter.removeAll(state)\n  })\n}) as MapActions\n\nconst MapStoreContext = createContext(null)\n\nexport const MapStoreProvider = ({ children, value }) => {\n  const storeRef = useRef<any>()\n  if (!storeRef.current) {\n    storeRef.current = createStore<MapState & MapActions>()(immer((set, get) => ({\n      ...initialState,\n      ...value,\n      ...actions(set, get),\n      reset: () => ({\n        ...initialState,\n        ...value,\n      })\n    })))\n  }\n  return (\n    <MapStoreContext.Provider value={storeRef.current}>\n      {children}\n    </MapStoreContext.Provider>\n  )\n}\n\nexport const useMapStore = (selector) => {\n  const store = useContext(MapStoreContext)\n  if (!store) {\n    throw new Error('Missing MapStoreProvider')\n  }\n  return useStore(store, selector) as any\n}\n\nexport default useMapStore\n","import { nanoid } from '@reduxjs/toolkit'\nimport { feature, lineString, point, polygon } from '@turf/helpers'\nimport { getCoords, getType } from '@turf/invariant'\nimport { flattenEach } from '@turf/meta'\n\nfunction setFeaturesByState({ state, setFeatures }) {\n  const type = getType(state)\n\n  if (type === 'MultiPoint') {\n    setFeatures(\n      getCoords(state).map((coord) => ({\n        id: nanoid(),\n        ...point(coord),\n      })),\n    )\n  } else if (type === 'MultiLineString') {\n    setFeatures(\n      getCoords(state).map((coord) => ({\n        id: nanoid(),\n        ...lineString(coord),\n      })),\n    )\n  } else if (type === 'MultiPolygon') {\n    setFeatures(\n      getCoords(state).map((coord) => ({\n        id: nanoid(),\n        ...polygon(coord),\n      })),\n    )\n  } else if (['Point', 'LineString', 'Polygon'].includes(type)) {\n    setFeatures([\n      {\n        id: nanoid(),\n        ...feature(state),\n      },\n    ])\n  } else if(type === 'GeometryCollection'){\n    let newFeatures = [] as any\n    flattenEach(state, (currentFeature) => newFeatures.push({id: nanoid(), ...currentFeature}))\n    setFeatures(newFeatures)\n  }\n}\n\nexport default setFeaturesByState\n","\nimport { circle } from '@turf/circle'\nimport { getGeom } from '@turf/invariant'\nimport { pointOnFeature } from '@turf/point-on-feature'\nimport { isGeoJSONObject, isPoint } from 'geojson-validation'\nimport { toBounds, toLatLng } from '../utils'\n\nfunction zoomToFeatureByState({\n  state,\n  config: { zoomToFeature },\n  map\n}){\n  const geometry = getGeom(state as any)\n\n  if (isPoint(geometry)) {\n    if (zoomToFeature) {\n      const bounds = toBounds(circle(state, 0.25, { steps: 4 })) as any\n      map.fitBounds(bounds, { animate: false })\n    } else {\n      map.panTo(toLatLng(state), { animate: false })\n    }\n\n    return\n  }\n\n  if (isGeoJSONObject(geometry)) {\n    if (zoomToFeature) {\n      const bounds = toBounds(state) as any\n      map.fitBounds(bounds, { animate: false })\n    } else {\n      map.panTo(toLatLng(pointOnFeature(state)))\n    }\n  }\n}\n\nexport default zoomToFeatureByState\n","// @ts-nocheck\nimport L from 'leaflet'\nimport MarkerIcon from 'leaflet/dist/images/marker-icon.png'\nimport MarkerIcon2x from 'leaflet/dist/images/marker-icon-2x.png'\nimport MarkerShadowIcon from 'leaflet/dist/images/marker-shadow.png'\n\nfunction setDefaultIcon(options = {}) {\n  L.Icon.Default.mergeOptions({\n    iconUrl: MarkerIcon as any,\n    iconRetinaUrl: MarkerIcon2x as string,\n    shadowUrl: MarkerShadowIcon as string,\n    ...options\n  })\n}\n\nexport default setDefaultIcon\n","import { getCoord } from '@turf/invariant'\nimport center from '@turf/center';\nimport flip from '@turf/flip';\n\nfunction toLatLng(data: any) {\n  if (!data) return data\n\n  return getCoord(flip(center(data)))\n}\n\nexport default toLatLng\n","import { bbox } from '@turf/bbox'\n\nfunction toBounds(data: any){\n  const arr = bbox(data)\n\n  return [\n    [arr[1], arr[0]],\n    [arr[3], arr[2]]\n  ]\n}\n\nexport default toBounds\n","import {\n  AttributionControl,\n  LayersControl,\n  ScaleControl,\n  TileLayer,\n  ZoomControl,\n} from 'react-leaflet'\nimport { GeomanControls } from 'react-leaflet-geoman-v2'\nimport { FullscreenControl } from '../controls/FullscreenControl'\nimport { useMapStore } from '../hooks/useMapStore'\nimport { map as _map } from 'lodash'\nimport { Fragment, useMemo } from 'react'\nimport DynamicLayer from './DynamicLayer'\n\nconst controlComponents = {\n  zoomControl: ZoomControl,\n  layersControl: LayersControl,\n  drawControl: GeomanControls,\n  attributionControl: AttributionControl,\n  scaleControl: ScaleControl,\n  fullscreenControl: FullscreenControl,\n}\n\nconst defaultDrawControlOptions = {\n  drawMarker: true,\n  drawCircle: false,\n  drawCircleMarker: false,\n  drawPolyline: false,\n  drawRectangle: false,\n  drawPolygon: false,\n  drawText: false,\n\n  editMode: true,\n  dragMode: false,\n  cutPolygon: false,\n  removalMode: true,\n  rotateMode: false,\n}\n\nfunction ControlManager() {\n  const [geomType, layers, baseLayers, _controls] = useMapStore((state) => [\n    state.config.geomType,\n    state.config.layers,\n    state.config.baseLayers,\n    state.config.controls,\n  ])\n\n  const [addFeature, removeFeature, removeFeatures] = useMapStore((state) => [\n    state.addFeature,\n    state.removeFeature,\n    state.removeFeatures,\n  ])\n\n  const handleCreate = (e) => {\n    e.target.removeLayer(e.layer)\n\n    if (['Point', 'LineString', 'Polygon'].includes(geomType)) removeFeatures()\n\n    addFeature(e.layer.toGeoJSON())\n  }\n\n  const handleRemove = ({ layer, target }) => {\n    const id = layer.feature.id\n\n    id && removeFeature(id)\n  }\n\n  const controls = useMemo(() => _map(_controls, (opts, name) => {\n    const Component = controlComponents[name]\n    if (!opts || opts?.enabled == false || !Component) return null\n\n    let options = { ...opts }\n    let children: any = null\n\n    if (name === 'layersControl') {\n      children = (\n        <Fragment>\n          {baseLayers?.map(\n            ({ selected = false, title = 'None', ...layerProps }, k) => (\n              <LayersControl.BaseLayer key={k} name={title} checked={selected}>\n                <TileLayer url=\"\" {...layerProps} />\n              </LayersControl.BaseLayer>\n            ),\n          )}\n\n          {layers?.map(\n            ({ selected = false, title = 'None', ...layerProps }, k) => (\n              <LayersControl.Overlay key={k} name={title} checked={selected}>\n                <DynamicLayer {...(layerProps as any)} />\n              </LayersControl.Overlay>\n            ),\n          )}\n        </Fragment>\n      )\n    }\n\n    if (name === 'drawControl') {\n      options = {\n        ...options,\n        options: defaultDrawControlOptions,\n      }\n\n      if (['Point', 'MultiPoint'].includes(geomType)) {\n        options.options = {\n          ...options.options,\n          drawMarker: true,\n          editMode: true,\n          removalMode: true,\n        }\n      } else if (['LineString', 'MultiLineString'].includes(geomType)) {\n        options.options = {\n          ...options.options,\n          drawPolyline: true,\n          editMode: true,\n          dragMode: true,\n          cutPolygon: true,\n          removalMode: true,\n          rotateMode: true,\n        }\n      } else if (['Polygon', 'MultiPolygon'].includes(geomType)) {\n        options.options = {\n          ...options.options,\n          drawRectangle: true,\n          drawPolygon: true,\n          editMode: true,\n          dragMode: true,\n          cutPolygon: true,\n          removalMode: true,\n          rotateMode: true,\n        }\n      } else {\n        options.options = {\n          ...options.options,\n          drawMarker: true,\n          drawCircle: true,\n          drawPolyline: true,\n          drawRectangle: true,\n          drawPolygon: true,\n\n          editMode: true,\n          dragMode: true,\n          cutPolygon: true,\n          removalMode: true,\n          rotateMode: true,\n        }\n      }\n\n      options.onCreate = handleCreate\n      options.onMapRemove = handleRemove\n    }\n\n    return <Component key={name} {...options} children={children} />\n  }).filter((v) => v), [JSON.stringify(_controls)])\n\n  return controls.map((control: any) => control)\n}\n\nexport default ControlManager\n","import { createControlComponent } from '@react-leaflet/core'\nimport { Control, ControlPosition } from 'leaflet'\nimport 'leaflet.fullscreen'\nimport 'leaflet.fullscreen/Control.FullScreen.css'\n\nexport type FullscreenOptions = {\n  content?: string | undefined;\n  position?: ControlPosition | undefined;\n  title?: string | undefined;\n  titleCancel?: string | undefined;\n  forceSeparateButton?: boolean | undefined;\n  forcePseudoFullscreen?: boolean | undefined;\n  fullscreenElement?: false | HTMLElement | undefined;\n}\n\nexport const FullscreenControl = createControlComponent<\n  // @ts-ignore\n  Control.FullScreen,\n  FullscreenOptions\n>(function createFullscreenControl(props) {\n  // @ts-ignore\n  return new Control.FullScreen(props)\n})\n","import { WMSTileLayer } from 'react-leaflet'\nimport { GeoJSON } from '../components/GeoJSON'\nimport { isString } from 'lodash'\nimport GeoJSONAjax from './GeoJSONAjax'\nimport PopupTemplate from './PopupTemplate'\nimport { renderToString } from 'react-dom/server'\n\ntype TDynamicLayerProps = {\n  type: 'wms' | 'geojson'\n\n  data?: Record<string, any> | string\n  dataUrl?: string\n\n  popupTemplate: Record<string, any> | string\n}\n\nfunction DynamicLayer(props: TDynamicLayerProps) {\n  const { type, popupTemplate, ...other } = props\n\n  let tplPopupProps = popupTemplate\n    ? isString(popupTemplate)\n      ? { template: popupTemplate }\n      : popupTemplate\n    : {}\n\n  if (type === 'wms') {\n    const opts = {\n      url: '',\n      format: 'image/png',\n      transparent: true,\n      ...other,\n    }\n\n    return <WMSTileLayer {...opts} />\n  }\n\n  if (type === 'geojson') {\n    if (other.data) {\n      const opts = {\n        data: isString(other.data) ? JSON.parse(other.data as any) : other.data,\n        pmIgnore: true,\n        onEachFeature: (feature, layer) => {\n          popupTemplate &&\n            layer.bindPopup(() => {\n              return renderToString(\n                <PopupTemplate data={feature?.properties} {...tplPopupProps} />,\n              )\n            })\n        },\n      }\n\n      return <GeoJSON {...opts} />\n    }\n\n    if (other.dataUrl) {\n      const opts = {\n        dataUrl: other.dataUrl,\n        pmIgnore: true,\n        onEachFeature: (feature, layer) => {\n          popupTemplate &&\n            layer.bindPopup(() => {\n              return renderToString(\n                <PopupTemplate data={feature?.properties} {...tplPopupProps} />,\n              )\n            })\n        },\n      }\n\n      return <GeoJSONAjax {...opts} />\n    }\n  }\n\n  return null\n}\n\nexport default DynamicLayer\n"]}