import { createPathComponent, createElementObject, extendContext, createControlComponent } from '@react-leaflet/core';
import E, { GeoJSON, Control } from 'leaflet';
import { isArray, get, isFunction, last, map, template, isString } from 'lodash';
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { createContext, useRef, useContext, useState, useEffect, useMemo, Fragment as Fragment$1 } from 'react';
import { point, lineString, polygon, feature, multiPoint, multiLineString, multiPolygon, geometryCollection } from '@turf/helpers';
import { getType, getCoords, getCoord, getGeom } from '@turf/invariant';
import { flattenEach, featureEach } from '@turf/meta';
import { useMap, Pane, LayersControl, TileLayer, WMSTileLayer, ZoomControl, AttributionControl, ScaleControl } from 'react-leaflet';
import { createEntityAdapter, nanoid } from '@reduxjs/toolkit';
import { createStore, useStore } from 'zustand';
import { immer } from 'zustand/middleware/immer';
import { useUpdateEffect } from 'react-use';
import { circle } from '@turf/circle';
import { pointOnFeature } from '@turf/point-on-feature';
import { isPoint, isGeoJSONObject } from 'geojson-validation';
import Ze from 'leaflet/dist/images/marker-icon.png';
import Me from 'leaflet/dist/images/marker-icon-2x.png';
import Be from 'leaflet/dist/images/marker-shadow.png';
import Pe from '@turf/center';
import Ne from '@turf/flip';
import { bbox } from '@turf/bbox';
import { GeomanControls } from 'react-leaflet-geoman-v2';
import 'leaflet.fullscreen';
import 'leaflet.fullscreen/Control.FullScreen.css';
import { renderToString } from 'react-dom/server';

var g=createPathComponent(function({data:r,...t},e){let a=new GeoJSON(r,t);return createElementObject(a,extendContext(e,{overlayContainer:a}))},function(r,t,e){t.data!==e.data&&r.clearLayers().addData(t.data),t.style!==e.style&&(t.style==null?r.resetStyle():r.setStyle(t.style));});var M=(o,r)=>o?template(o,{interpolate:/{{([\s\S]+?)}}/g})(r):"";function ie(o){let{template:r,heading:t,content:e,data:a}=o;return r?jsx("div",{dangerouslySetInnerHTML:{__html:M(r,a)}}):jsxs("div",{children:[jsx("div",{className:"pc-heading",children:M(t,a)}),jsx("hr",{}),isArray(e)?jsx("div",{children:e?.map((p,i)=>jsxs("div",{children:[jsxs("span",{className:"pc-content-label",children:[p.label,": "]}),get(a,p.value)]},i))}):jsx("div",{dangerouslySetInnerHTML:{__html:M(e,a)}})]})}var R=ie;function pe(o){let{dataUrl:r,children:t,...e}=o,[a,p]=useState(!1),[i,u]=useState(null);return useEffect(()=>{a&&r&&fetch(r).then(d=>d.json()).then(d=>{u(d);});},[a,r]),jsx(g,{...e,data:i,eventHandlers:{add:d=>{p(!0);},remove:d=>{p(!1);}},children:isFunction(t)&&i&&t(i)})}var V=pe;var b=createEntityAdapter(),W=b.getSelectors(o=>o),Q=b.getInitialState({$wire:null,$watch:null,state:null,config:{}}),Oe=(o,r)=>({addFeature:t=>o(e=>{b.addOne(e,{id:nanoid(),...t});}),updateFeature:t=>o(e=>{b.updateOne(e,t);}),removeFeature:t=>o(e=>{b.removeOne(e,t);}),setFeatures:t=>o(e=>{b.setAll(e,t);}),removeFeatures:()=>o(t=>{b.removeAll(t);})}),T=createContext(null),Ce=({children:o,value:r})=>{let t=useRef();return t.current||(t.current=createStore()(immer((e,a)=>({...Q,...r,...Oe(e),reset:()=>({...Q,...r})})))),jsx(T.Provider,{value:t.current,children:o})},O=o=>{let r=useContext(T);if(!r)throw new Error("Missing MapStoreProvider");return useStore(r,o)};function Ie({state:o,setFeatures:r}){let t=getType(o);if(t==="MultiPoint")r(getCoords(o).map(e=>({id:nanoid(),...point(e)})));else if(t==="MultiLineString")r(getCoords(o).map(e=>({id:nanoid(),...lineString(e)})));else if(t==="MultiPolygon")r(getCoords(o).map(e=>({id:nanoid(),...polygon(e)})));else if(["Point","LineString","Polygon"].includes(t))r([{id:nanoid(),...feature(o)}]);else if(t==="GeometryCollection"){let e=[];flattenEach(o,a=>e.push({id:nanoid(),...a})),r(e);}}var L=Ie;function Re(o={}){E.Icon.Default.mergeOptions({iconUrl:Ze,iconRetinaUrl:Me,shadowUrl:Be,...o});}var Ve=Re;function we(o){return o&&getCoord(Ne(Pe(o)))}var X=we;function Ye(o){let r=bbox(o);return [[r[1],r[0]],[r[3],r[2]]]}var I=Ye;function je({state:o,config:{zoomToFeature:r},map:t}){let e=getGeom(o);if(isPoint(e)){if(r){let a=I(circle(o,.25,{steps:4}));t.fitBounds(a,{animate:!1});}else t.panTo(X(o),{animate:!1});return}if(isGeoJSONObject(e))if(r){let a=I(o);t.fitBounds(a,{animate:!1});}else t.panTo(X(pointOnFeature(o)));}var N=je;function nt(){let o=useMap(),[r,t,e,a,p,i,u,d,k,l,y,c,m,C,x]=O(n=>[n.state,n.$wire,n.config.geomType,n.config.latitudeField,n.config.longitudeField,n.config.drawField,n.config.zoomToFeature,n.config.markerOptions,n.config.polylineOptions,n.config.polygonOptions,n.config.rectangleOptions,W.selectAll(n),n.updateFeature,n.setFeatures,n.removeFeature]);useEffect(()=>{r&&(L({state:r,setFeatures:C}),N({state:r,config:{zoomToFeature:u},map:o}));},[]),useUpdateEffect(()=>{if(c?.length){if(["Point","LineString","Polygon"].includes(e)&&c?.length===1){let n=getGeom(last(c));if(e==="Point"){let s=getCoord(n);a&&t.set(a,s[1],!1),p&&t.set(p,s[0],!1);}i&&t.set(i,JSON.stringify(n),!1);}else if(e==="MultiPoint"){let n=getGeom(multiPoint(map(c,s=>getCoord(s))));i&&t.set(i,JSON.stringify(n),!1);}else if(e==="MultiLineString"){let n=getGeom(multiLineString(map(c,s=>getCoords(s))));i&&t.set(i,JSON.stringify(n),!1);}else if(e==="MultiPolygon"){let n=getGeom(multiPolygon(map(c,s=>getCoords(s))));i&&t.set(i,JSON.stringify(n),!1);}else if(e==="GeometryCollection"){let n=getGeom(geometryCollection(map(c,s=>getGeom(s))));i&&t.set(i,JSON.stringify(n),!1);}}else i&&t.set(i,"",!1);},[JSON.stringify(c)]);let F={pointToLayer:(n,s)=>{let f={...d};return f.icon&&(f.icon=E.icon(f.icon)),E.marker(s,f)},style:()=>({...k,...l,...y}),eventHandlers:{"pm:update":({layer:n,target:s})=>{featureEach(s.toGeoJSON(),(f,z)=>{m({id:f.id,changes:f});});},"pm:cut":n=>{o.removeLayer(n.layer);let s=get(n,"originalLayer.feature.id");x(s);let f=getType(n.layer.toGeoJSON()),z=getGeom(f===e?n.layer.toGeoJSON():n.originalLayer.toGeoJSON());L({state:z,setFeatures:C});}},pane:["Point","MultiPoint"].includes(e)?"stateMarkerPane":"stateOverlayPane"};return jsxs(Fragment,{children:[jsx(Pane,{name:"stateOverlayPane",style:{zIndex:450}}),jsx(Pane,{name:"stateMarkerPane",style:{zIndex:650}}),c?.map((n,s)=>jsx(g,{data:n,...F},s))]})}var at=nt;var U=createControlComponent(function(r){return new Control.FullScreen(r)});function dt(o){let{type:r,popupTemplate:t,...e}=o,a=t?isString(t)?{template:t}:t:{};if(r==="wms"){let p={url:"",format:"image/png",transparent:!0,...e};return jsx(WMSTileLayer,{...p})}if(r==="geojson"){let p={pointToLayer:(i,u)=>{let d={...e.markerOptions};return d.icon&&(d.icon=E.icon(d.icon)),E.marker(u,d)},style:i=>({...e.polylineOptions,...e.polygonOptions,...e.rectangleOptions}),onEachFeature:(i,u)=>{t&&u.bindPopup(()=>renderToString(jsx(R,{data:i?.properties,...a})));}};if(e.data)return p={...p,data:isString(e.data)?JSON.parse(e.data):e.data},jsx(g,{...p});if(e.dataUrl)return p={...p,dataUrl:e.dataUrl},jsx(V,{...p})}return null}var q=dt;var xt={zoomControl:ZoomControl,layersControl:LayersControl,drawControl:GeomanControls,attributionControl:AttributionControl,scaleControl:ScaleControl,fullscreenControl:U},Ft={drawMarker:!1,drawCircle:!1,drawCircleMarker:!1,drawPolyline:!1,drawRectangle:!1,drawPolygon:!1,drawText:!1,editMode:!0,dragMode:!1,cutPolygon:!1,removalMode:!0,rotateMode:!1};function St(){let[o,r,t,e]=O(l=>[l.config.geomType,l.config.layers,l.config.baseLayers,l.config.controls]),[a,p,i]=O(l=>[l.addFeature,l.removeFeature,l.removeFeatures]),u=l=>{l.target.removeLayer(l.layer),["Point","LineString","Polygon"].includes(o)&&i(),a(l.layer.toGeoJSON());},d=({layer:l,target:y})=>{let c=l.feature.id;c&&p(c);};return useMemo(()=>map(e,(l,y)=>{let c=xt[y];if(!l||l?.enabled==!1||!c)return null;let m={...l},C=null;return y==="layersControl"&&(C=jsxs(Fragment$1,{children:[t?.map(({selected:x=!1,title:F="None",...n},s)=>jsx(LayersControl.BaseLayer,{name:F,checked:x,children:jsx(TileLayer,{url:"",...n})},s)),r?.map(({selected:x=!1,title:F="None",...n},s)=>jsx(LayersControl.Overlay,{name:F,checked:x,children:jsx(q,{...n,zIndex:100})},s))]})),y==="drawControl"&&(m={...m,options:Ft},["Point","MultiPoint"].includes(o)?m.options={...m.options,drawMarker:!0,editMode:!0,removalMode:!0}:["LineString","MultiLineString"].includes(o)?m.options={...m.options,drawPolyline:!0,editMode:!0,dragMode:!0,cutPolygon:!0,removalMode:!0,rotateMode:!0}:["Polygon","MultiPolygon"].includes(o)?m.options={...m.options,drawRectangle:!0,drawPolygon:!0,editMode:!0,dragMode:!0,cutPolygon:!0,removalMode:!0,rotateMode:!0}:m.options={...m.options,drawMarker:!0,drawCircle:!0,drawPolyline:!0,drawRectangle:!0,drawPolygon:!0,editMode:!0,dragMode:!0,cutPolygon:!0,removalMode:!0,rotateMode:!0},m.onCreate=u,m.onMapRemove=d),jsx(c,{...m,children:C},y)}).filter(l=>l),[JSON.stringify(e)]).map(l=>l)}var Jt=St;

export { Jt as ControlManager, at as FeatureManager, U as FullscreenControl, g as GeoJSON, V as GeoJSONAjax, Ce as MapStoreProvider, R as PopupTemplate, W as featuresSelectors, Ve as setDefaultIcon, L as setFeaturesByState, I as toBounds, X as toLatLng, O as useMapStore, N as zoomToFeatureByState };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.js.map